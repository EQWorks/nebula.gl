"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _constants = require("../constants");

var _utils = require("./utils");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class BaseMode {
  constructor() {
    var _this = this;

    _defineProperty(this, "_tentativeFeature", void 0);

    _defineProperty(this, "_editHandles", void 0);

    _defineProperty(this, "getTentativeFeature", function () {
      return _this._tentativeFeature;
    });

    _defineProperty(this, "getEditHandles", function () {
      return _this._editHandles;
    });

    _defineProperty(this, "setTentativeFeature", function (feature) {
      _this._tentativeFeature = feature;
    });

    _defineProperty(this, "getSelectedFeature", function (props, featureIndex) {
      var data = props.data,
          selectedIndexes = props.selectedIndexes;
      var featureCollection = data.getObject();
      var features = featureCollection && featureCollection.features;
      var selectedIndex = (0, _utils.isNumeric)(featureIndex) ? Number(featureIndex) : selectedIndexes && selectedIndexes[0];
      return features && features[selectedIndex];
    });

    this._tentativeFeature = null;
    this._editHandles = null;
  }

  handleClick(event, props) {}

  handlePointerMove(event, props) {}

  handleStartDragging(event, props) {}

  handleStopDragging(event, props) {}

  getGuides(props) {}

  getEditHandlesFromFeature(feature, featureIndex) {
    var coordinates = (0, _utils.getFeatureCoordinates)(feature);

    if (!coordinates) {
      return null;
    }

    return coordinates.map(function (coord, i) {
      return {
        type: 'Feature',
        properties: {
          // TODO deprecate renderType
          renderType: feature.properties.renderType,
          guideType: _constants.GUIDE_TYPE.EDIT_HANDLE,
          featureIndex: featureIndex,
          positionIndexes: [i]
        },
        geometry: {
          type: _constants.GEOJSON_TYPE.POINT,
          coordinates: [coord]
        }
      };
    });
  }

}

exports.default = BaseMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lZGl0LW1vZGVzL2Jhc2UtbW9kZS5qcyJdLCJuYW1lcyI6WyJCYXNlTW9kZSIsImNvbnN0cnVjdG9yIiwiX3RlbnRhdGl2ZUZlYXR1cmUiLCJfZWRpdEhhbmRsZXMiLCJmZWF0dXJlIiwicHJvcHMiLCJmZWF0dXJlSW5kZXgiLCJkYXRhIiwic2VsZWN0ZWRJbmRleGVzIiwiZmVhdHVyZUNvbGxlY3Rpb24iLCJnZXRPYmplY3QiLCJmZWF0dXJlcyIsInNlbGVjdGVkSW5kZXgiLCJOdW1iZXIiLCJoYW5kbGVDbGljayIsImV2ZW50IiwiaGFuZGxlUG9pbnRlck1vdmUiLCJoYW5kbGVTdGFydERyYWdnaW5nIiwiaGFuZGxlU3RvcERyYWdnaW5nIiwiZ2V0R3VpZGVzIiwiZ2V0RWRpdEhhbmRsZXNGcm9tRmVhdHVyZSIsImNvb3JkaW5hdGVzIiwibWFwIiwiY29vcmQiLCJpIiwidHlwZSIsInByb3BlcnRpZXMiLCJyZW5kZXJUeXBlIiwiZ3VpZGVUeXBlIiwiR1VJREVfVFlQRSIsIkVESVRfSEFORExFIiwicG9zaXRpb25JbmRleGVzIiwiZ2VvbWV0cnkiLCJHRU9KU09OX1RZUEUiLCJQT0lOVCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVlBOztBQUNBOzs7O0FBRWUsTUFBTUEsUUFBTixDQUFlO0FBSTVCQyxFQUFBQSxXQUFXLEdBQUc7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQSxpREFlUSxZQUFNO0FBQzFCLGFBQU8sS0FBSSxDQUFDQyxpQkFBWjtBQUNELEtBakJhOztBQUFBLDRDQW1CRyxZQUFNO0FBQ3JCLGFBQU8sS0FBSSxDQUFDQyxZQUFaO0FBQ0QsS0FyQmE7O0FBQUEsaURBdUJRLFVBQUNDLE9BQUQsRUFBc0I7QUFDMUMsTUFBQSxLQUFJLENBQUNGLGlCQUFMLEdBQXlCRSxPQUF6QjtBQUNELEtBekJhOztBQUFBLGdEQWtETyxVQUFDQyxLQUFELEVBQXNDQyxZQUF0QyxFQUFnRTtBQUFBLFVBQzNFQyxJQUQyRSxHQUNqREYsS0FEaUQsQ0FDM0VFLElBRDJFO0FBQUEsVUFDckVDLGVBRHFFLEdBQ2pESCxLQURpRCxDQUNyRUcsZUFEcUU7QUFFbkYsVUFBTUMsaUJBQWlCLEdBQUdGLElBQUksQ0FBQ0csU0FBTCxFQUExQjtBQUNBLFVBQU1DLFFBQVEsR0FBR0YsaUJBQWlCLElBQUlBLGlCQUFpQixDQUFDRSxRQUF4RDtBQUVBLFVBQU1DLGFBQWEsR0FBRyxzQkFBVU4sWUFBVixJQUNsQk8sTUFBTSxDQUFDUCxZQUFELENBRFksR0FFbEJFLGVBQWUsSUFBSUEsZUFBZSxDQUFDLENBQUQsQ0FGdEM7QUFJQSxhQUFPRyxRQUFRLElBQUlBLFFBQVEsQ0FBQ0MsYUFBRCxDQUEzQjtBQUNELEtBNURhOztBQUNaLFNBQUtWLGlCQUFMLEdBQXlCLElBQXpCO0FBQ0EsU0FBS0MsWUFBTCxHQUFvQixJQUFwQjtBQUNEOztBQUVEVyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBb0JWLEtBQXBCLEVBQXlELENBQUU7O0FBRXRFVyxFQUFBQSxpQkFBaUIsQ0FBQ0QsS0FBRCxFQUEwQlYsS0FBMUIsRUFBK0QsQ0FBRTs7QUFFbEZZLEVBQUFBLG1CQUFtQixDQUFDRixLQUFELEVBQTRCVixLQUE1QixFQUFpRSxDQUFFOztBQUV0RmEsRUFBQUEsa0JBQWtCLENBQUNILEtBQUQsRUFBMkJWLEtBQTNCLEVBQWdFLENBQUU7O0FBRXBGYyxFQUFBQSxTQUFTLENBQUNkLEtBQUQsRUFBK0MsQ0FBRTs7QUFjMURlLEVBQUFBLHlCQUF5QixDQUFDaEIsT0FBRCxFQUFtQkUsWUFBbkIsRUFBMEM7QUFDakUsUUFBTWUsV0FBVyxHQUFHLGtDQUFzQmpCLE9BQXRCLENBQXBCOztBQUNBLFFBQUksQ0FBQ2lCLFdBQUwsRUFBa0I7QUFDaEIsYUFBTyxJQUFQO0FBQ0Q7O0FBQ0QsV0FBT0EsV0FBVyxDQUFDQyxHQUFaLENBQWdCLFVBQUNDLEtBQUQsRUFBUUMsQ0FBUixFQUFjO0FBQ25DLGFBQU87QUFDTEMsUUFBQUEsSUFBSSxFQUFFLFNBREQ7QUFFTEMsUUFBQUEsVUFBVSxFQUFFO0FBQ1Y7QUFDQUMsVUFBQUEsVUFBVSxFQUFFdkIsT0FBTyxDQUFDc0IsVUFBUixDQUFtQkMsVUFGckI7QUFHVkMsVUFBQUEsU0FBUyxFQUFFQyxzQkFBV0MsV0FIWjtBQUlWeEIsVUFBQUEsWUFBWSxFQUFaQSxZQUpVO0FBS1Z5QixVQUFBQSxlQUFlLEVBQUUsQ0FBQ1AsQ0FBRDtBQUxQLFNBRlA7QUFTTFEsUUFBQUEsUUFBUSxFQUFFO0FBQ1JQLFVBQUFBLElBQUksRUFBRVEsd0JBQWFDLEtBRFg7QUFFUmIsVUFBQUEsV0FBVyxFQUFFLENBQUNFLEtBQUQ7QUFGTDtBQVRMLE9BQVA7QUFjRCxLQWZNLENBQVA7QUFnQkQ7O0FBcEQyQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIHtcbiAgRmVhdHVyZSxcbiAgQ2xpY2tFdmVudCxcbiAgUG9pbnRlck1vdmVFdmVudCxcbiAgU3RhcnREcmFnZ2luZ0V2ZW50LFxuICBTdG9wRHJhZ2dpbmdFdmVudCxcbiAgRmVhdHVyZUNvbGxlY3Rpb25cbn0gZnJvbSAna2VwbGVyLW91dGRhdGVkLW5lYnVsYS5nbC1lZGl0LW1vZGVzJztcbmltcG9ydCB0eXBlIHsgTW9kZVByb3BzIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbXBvcnQgeyBHRU9KU09OX1RZUEUsIEdVSURFX1RZUEUgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgZ2V0RmVhdHVyZUNvb3JkaW5hdGVzLCBpc051bWVyaWMgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzZU1vZGUge1xuICBfdGVudGF0aXZlRmVhdHVyZTogP0ZlYXR1cmU7XG4gIF9lZGl0SGFuZGxlczogPyhGZWF0dXJlW10pO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3RlbnRhdGl2ZUZlYXR1cmUgPSBudWxsO1xuICAgIHRoaXMuX2VkaXRIYW5kbGVzID0gbnVsbDtcbiAgfVxuXG4gIGhhbmRsZUNsaWNrKGV2ZW50OiBDbGlja0V2ZW50LCBwcm9wczogTW9kZVByb3BzPEZlYXR1cmVDb2xsZWN0aW9uPikge31cblxuICBoYW5kbGVQb2ludGVyTW92ZShldmVudDogUG9pbnRlck1vdmVFdmVudCwgcHJvcHM6IE1vZGVQcm9wczxGZWF0dXJlQ29sbGVjdGlvbj4pIHt9XG5cbiAgaGFuZGxlU3RhcnREcmFnZ2luZyhldmVudDogU3RhcnREcmFnZ2luZ0V2ZW50LCBwcm9wczogTW9kZVByb3BzPEZlYXR1cmVDb2xsZWN0aW9uPikge31cblxuICBoYW5kbGVTdG9wRHJhZ2dpbmcoZXZlbnQ6IFN0b3BEcmFnZ2luZ0V2ZW50LCBwcm9wczogTW9kZVByb3BzPEZlYXR1cmVDb2xsZWN0aW9uPikge31cblxuICBnZXRHdWlkZXMocHJvcHM6IE1vZGVQcm9wczxGZWF0dXJlQ29sbGVjdGlvbj4pOiA/T2JqZWN0IHt9XG5cbiAgZ2V0VGVudGF0aXZlRmVhdHVyZSA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5fdGVudGF0aXZlRmVhdHVyZTtcbiAgfTtcblxuICBnZXRFZGl0SGFuZGxlcyA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5fZWRpdEhhbmRsZXM7XG4gIH07XG5cbiAgc2V0VGVudGF0aXZlRmVhdHVyZSA9IChmZWF0dXJlOiBGZWF0dXJlKSA9PiB7XG4gICAgdGhpcy5fdGVudGF0aXZlRmVhdHVyZSA9IGZlYXR1cmU7XG4gIH07XG5cbiAgZ2V0RWRpdEhhbmRsZXNGcm9tRmVhdHVyZShmZWF0dXJlOiBGZWF0dXJlLCBmZWF0dXJlSW5kZXg6ID9udW1iZXIpIHtcbiAgICBjb25zdCBjb29yZGluYXRlcyA9IGdldEZlYXR1cmVDb29yZGluYXRlcyhmZWF0dXJlKTtcbiAgICBpZiAoIWNvb3JkaW5hdGVzKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNvb3JkaW5hdGVzLm1hcCgoY29vcmQsIGkpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdGZWF0dXJlJyxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIC8vIFRPRE8gZGVwcmVjYXRlIHJlbmRlclR5cGVcbiAgICAgICAgICByZW5kZXJUeXBlOiBmZWF0dXJlLnByb3BlcnRpZXMucmVuZGVyVHlwZSxcbiAgICAgICAgICBndWlkZVR5cGU6IEdVSURFX1RZUEUuRURJVF9IQU5ETEUsXG4gICAgICAgICAgZmVhdHVyZUluZGV4LFxuICAgICAgICAgIHBvc2l0aW9uSW5kZXhlczogW2ldXG4gICAgICAgIH0sXG4gICAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgICAgdHlwZTogR0VPSlNPTl9UWVBFLlBPSU5ULFxuICAgICAgICAgIGNvb3JkaW5hdGVzOiBbY29vcmRdXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBnZXRTZWxlY3RlZEZlYXR1cmUgPSAocHJvcHM6IE1vZGVQcm9wczxGZWF0dXJlQ29sbGVjdGlvbj4sIGZlYXR1cmVJbmRleDogP251bWJlcikgPT4ge1xuICAgIGNvbnN0IHsgZGF0YSwgc2VsZWN0ZWRJbmRleGVzIH0gPSBwcm9wcztcbiAgICBjb25zdCBmZWF0dXJlQ29sbGVjdGlvbiA9IGRhdGEuZ2V0T2JqZWN0KCk7XG4gICAgY29uc3QgZmVhdHVyZXMgPSBmZWF0dXJlQ29sbGVjdGlvbiAmJiBmZWF0dXJlQ29sbGVjdGlvbi5mZWF0dXJlcztcblxuICAgIGNvbnN0IHNlbGVjdGVkSW5kZXggPSBpc051bWVyaWMoZmVhdHVyZUluZGV4KVxuICAgICAgPyBOdW1iZXIoZmVhdHVyZUluZGV4KVxuICAgICAgOiBzZWxlY3RlZEluZGV4ZXMgJiYgc2VsZWN0ZWRJbmRleGVzWzBdO1xuXG4gICAgcmV0dXJuIGZlYXR1cmVzICYmIGZlYXR1cmVzW3NlbGVjdGVkSW5kZXhdO1xuICB9O1xufVxuIl19