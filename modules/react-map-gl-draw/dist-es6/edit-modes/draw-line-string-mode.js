"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _v = _interopRequireDefault(require("uuid/v1"));

var _constants = require("../constants");

var _baseMode = _interopRequireDefault(require("./base-mode"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class DrawLineStringMode extends _baseMode.default {
  constructor() {
    var _this;

    super(...arguments);
    _this = this;

    _defineProperty(this, "handleClick", function (event, props) {
      var data = props.data,
          selectedIndexes = props.selectedIndexes;

      var selectedFeature = _this.getSelectedFeature(props);

      var tentativeFeature = _this.getTentativeFeature(); // add position to a selectedFeature


      if (selectedFeature) {
        var selectedFeatureIndex = selectedIndexes[0];
        var positionIndexes = [selectedFeature.geometry.coordinates.length];
        var updatedData = data.addPosition(selectedFeatureIndex, positionIndexes, event.mapCoords).getObject();
        props.onEdit({
          editType: _constants.EDIT_TYPE.ADD_POSITION,
          updatedData: updatedData,
          editContext: [{
            featureIndex: selectedFeatureIndex,
            editHandleIndex: positionIndexes[0],
            screenCoords: event.screenCoords,
            mapCoords: event.mapCoords
          }]
        }); // commit tentativeFeature to featureCollection
      } else if (tentativeFeature) {
        _this.setTentativeFeature(null);

        var feature = {
          type: 'Feature',
          properties: {
            id: tentativeFeature.properties.id,
            // todo deprecate renderType
            renderType: _constants.RENDER_TYPE.LINE_STRING
          },
          geometry: {
            type: _constants.GEOJSON_TYPE.LINE_STRING,
            coordinates: [tentativeFeature.geometry.coordinates[0], event.mapCoords]
          }
        };

        var _updatedData = data.addFeature(feature).getObject();

        props.onEdit({
          editType: _constants.EDIT_TYPE.ADD_FEATURE,
          updatedData: _updatedData,
          editContext: null
        });
      } else {
        tentativeFeature = {
          type: 'Feature',
          properties: {
            // TODO deprecate id & renderType
            id: (0, _v.default)(),
            renderType: _constants.RENDER_TYPE.LINE_STRING,
            guideType: _constants.GUIDE_TYPE.TENTATIVE
          },
          geometry: {
            type: _constants.GEOJSON_TYPE.POINT,
            coordinates: [event.mapCoords]
          }
        };

        _this.setTentativeFeature(tentativeFeature);
      }
    });

    _defineProperty(this, "getGuides", function (props) {
      var selectedFeature = _this.getSelectedFeature(props);

      var tentativeFeature = _this.getTentativeFeature();

      var feature = selectedFeature || tentativeFeature;
      var coordinates = (0, _utils.getFeatureCoordinates)(feature);

      if (!coordinates) {
        return null;
      }

      var event = props.lastPointerMoveEvent; // existing editHandles + cursorEditHandle

      var editHandles = _this.getEditHandlesFromFeature(feature) || [];
      var cursorEditHandle = {
        type: 'Feature',
        properties: {
          guideType: _constants.GUIDE_TYPE.CURSOR_EDIT_HANDLE,
          // TODO remove renderType
          renderType: _constants.RENDER_TYPE.LINE_STRING,
          positionIndexes: [editHandles.length]
        },
        geometry: {
          type: _constants.GEOJSON_TYPE.POINT,
          coordinates: [event.mapCoords]
        }
      };
      editHandles.push(cursorEditHandle); // tentativeFeature

      tentativeFeature = {
        type: 'Feature',
        properties: {
          // TODO deprecate id and renderType
          id: (0, _v.default)(),
          guideType: _constants.GUIDE_TYPE.TENTATIVE,
          renderType: _constants.RENDER_TYPE.LINE_STRING
        },
        geometry: {
          type: _constants.GEOJSON_TYPE.LINE_STRING,
          coordinates: [coordinates[coordinates.length - 1], event.mapCoords]
        }
      };
      return {
        tentativeFeature: tentativeFeature,
        editHandles: editHandles
      };
    });
  }

}

exports.default = DrawLineStringMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,