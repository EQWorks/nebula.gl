"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScaleMode = void 0;

var _centroid = _interopRequireDefault(require("@turf/centroid"));

var _distance = _interopRequireDefault(require("@turf/distance"));

var _transformScale = _interopRequireDefault(require("@turf/transform-scale"));

var _geojsonEditMode = require("./geojson-edit-mode.js");

var _immutableFeatureCollection = require("./immutable-feature-collection.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ScaleMode extends _geojsonEditMode.BaseGeoJsonEditMode {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_isScalable", void 0);

    _defineProperty(this, "_geometryBeingScaled", void 0);
  }

  handlePointerMoveAdapter(event, props) {
    var editAction = null;
    this._isScalable = Boolean(this._geometryBeingScaled) || this.isSelectionPicked(event.picks, props);

    if (!this._isScalable || !event.pointerDownMapCoords) {
      // Nothing to do
      return {
        editAction: null,
        cancelMapPan: false
      };
    }

    if (event.isDragging && this._geometryBeingScaled) {
      // Scale the geometry
      editAction = this.getScaleAction(event.pointerDownMapCoords, event.mapCoords, 'scaling', props);
    }

    return {
      editAction: editAction,
      cancelMapPan: true
    };
  }

  handleStartDraggingAdapter(event, props) {
    if (!this._isScalable) {
      return null;
    }

    this._geometryBeingScaled = this.getSelectedFeaturesAsFeatureCollection(props);
    return null;
  }

  handleStopDraggingAdapter(event, props) {
    var editAction = null;

    if (this._geometryBeingScaled) {
      // Scale the geometry
      editAction = this.getScaleAction(event.pointerDownMapCoords, event.mapCoords, 'scaled', props);
      this._geometryBeingScaled = null;
    }

    return editAction;
  }

  getCursorAdapter() {
    if (this._isScalable) {
      // TODO: look at doing SVG cursors to get a better "scale" cursor
      return 'move';
    }

    return null;
  }

  getScaleAction(startDragPoint, currentPoint, editType, props) {
    var startPosition = startDragPoint;
    var centroid = (0, _centroid.default)(this._geometryBeingScaled);
    var factor = getScaleFactor(centroid, startPosition, currentPoint);
    var scaledFeatures = (0, _transformScale.default)(this._geometryBeingScaled, factor, {
      origin: centroid
    });
    var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data);
    var selectedIndexes = props.selectedIndexes;

    for (var i = 0; i < selectedIndexes.length; i++) {
      var selectedIndex = selectedIndexes[i];
      var movedFeature = scaledFeatures.features[i];
      updatedData = updatedData.replaceGeometry(selectedIndex, movedFeature.geometry);
    }

    return {
      updatedData: updatedData.getObject(),
      editType: editType,
      editContext: {
        featureIndexes: selectedIndexes
      }
    };
  }

}

exports.ScaleMode = ScaleMode;

function getScaleFactor(centroid, startDragPoint, currentPoint) {
  var startDistance = (0, _distance.default)(centroid, startDragPoint);
  var endDistance = (0, _distance.default)(centroid, currentPoint);
  return endDistance / startDistance;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,