"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ElevationMode = void 0;

var _geojsonEditMode = require("./geojson-edit-mode.js");

var _modifyMode = require("./modify-mode.js");

function defaultCalculateElevationChange(_ref) {
  var pointerDownScreenCoords = _ref.pointerDownScreenCoords,
      screenCoords = _ref.screenCoords;
  return 10 * (pointerDownScreenCoords[1] - screenCoords[1]);
}

class ElevationMode extends _modifyMode.ModifyMode {
  makeElevatedEvent(event, position, props) {
    var _ref2 = props.modeConfig || {},
        _ref2$minElevation = _ref2.minElevation,
        minElevation = _ref2$minElevation === void 0 ? 0 : _ref2$minElevation,
        _ref2$maxElevation = _ref2.maxElevation,
        maxElevation = _ref2$maxElevation === void 0 ? 20000 : _ref2$maxElevation,
        _ref2$calculateElevat = _ref2.calculateElevationChange,
        calculateElevationChange = _ref2$calculateElevat === void 0 ? defaultCalculateElevationChange : _ref2$calculateElevat;

    if (!event.pointerDownScreenCoords) {
      return event;
    } // $FlowFixMe - really, I know it has something at index 2


    var elevation = position.length === 3 ? position[2] : 0; // calculateElevationChange is configurable because (at this time) modes are not aware of the viewport

    elevation += calculateElevationChange({
      pointerDownScreenCoords: event.pointerDownScreenCoords,
      screenCoords: event.screenCoords
    });
    elevation = Math.min(elevation, maxElevation);
    elevation = Math.max(elevation, minElevation);
    return Object.assign({}, event, {
      mapCoords: [position[0], position[1], elevation]
    });
  }

  handlePointerMoveAdapter(event, props) {
    var editHandle = (0, _geojsonEditMode.getPickedEditHandle)(event.pointerDownPicks);
    var position = editHandle ? editHandle.position : event.mapCoords;
    return super.handlePointerMoveAdapter(this.makeElevatedEvent(event, position, props), props);
  }

  handleStopDraggingAdapter(event, props) {
    var editHandle = (0, _geojsonEditMode.getPickedEditHandle)(event.picks);
    var position = editHandle ? editHandle.position : event.mapCoords;
    return super.handleStopDraggingAdapter(this.makeElevatedEvent(event, position, props), props);
  }

  getCursor(event) {
    var cursor = super.getCursor(event);

    if (cursor === 'cell') {
      cursor = 'ns-resize';
    }

    return cursor;
  }

  static calculateElevationChangeWithViewport(viewport, _ref3) {
    var pointerDownScreenCoords = _ref3.pointerDownScreenCoords,
        screenCoords = _ref3.screenCoords;
    // Source: https://gis.stackexchange.com/a/127949/111804
    var metersPerPixel = 156543.03392 * Math.cos(viewport.latitude * Math.PI / 180) / Math.pow(2, viewport.zoom);
    return metersPerPixel * (pointerDownScreenCoords[1] - screenCoords[1]) / 2;
  }

}

exports.ElevationMode = ElevationMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZWxldmF0aW9uLW1vZGUuanMiXSwibmFtZXMiOlsiZGVmYXVsdENhbGN1bGF0ZUVsZXZhdGlvbkNoYW5nZSIsInBvaW50ZXJEb3duU2NyZWVuQ29vcmRzIiwic2NyZWVuQ29vcmRzIiwiRWxldmF0aW9uTW9kZSIsIk1vZGlmeU1vZGUiLCJtYWtlRWxldmF0ZWRFdmVudCIsImV2ZW50IiwicG9zaXRpb24iLCJwcm9wcyIsIm1vZGVDb25maWciLCJtaW5FbGV2YXRpb24iLCJtYXhFbGV2YXRpb24iLCJjYWxjdWxhdGVFbGV2YXRpb25DaGFuZ2UiLCJlbGV2YXRpb24iLCJsZW5ndGgiLCJNYXRoIiwibWluIiwibWF4IiwiT2JqZWN0IiwiYXNzaWduIiwibWFwQ29vcmRzIiwiaGFuZGxlUG9pbnRlck1vdmVBZGFwdGVyIiwiZWRpdEhhbmRsZSIsInBvaW50ZXJEb3duUGlja3MiLCJoYW5kbGVTdG9wRHJhZ2dpbmdBZGFwdGVyIiwicGlja3MiLCJnZXRDdXJzb3IiLCJjdXJzb3IiLCJjYWxjdWxhdGVFbGV2YXRpb25DaGFuZ2VXaXRoVmlld3BvcnQiLCJ2aWV3cG9ydCIsIm1ldGVyc1BlclBpeGVsIiwiY29zIiwibGF0aXR1ZGUiLCJQSSIsInBvdyIsInpvb20iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFHQTs7QUFDQTs7QUFFQSxTQUFTQSwrQkFBVCxPQU1HO0FBQUEsTUFMREMsdUJBS0MsUUFMREEsdUJBS0M7QUFBQSxNQUpEQyxZQUlDLFFBSkRBLFlBSUM7QUFDRCxTQUFPLE1BQU1ELHVCQUF1QixDQUFDLENBQUQsQ0FBdkIsR0FBNkJDLFlBQVksQ0FBQyxDQUFELENBQS9DLENBQVA7QUFDRDs7QUFFTSxNQUFNQyxhQUFOLFNBQTRCQyxzQkFBNUIsQ0FBdUM7QUFDNUNDLEVBQUFBLGlCQUFpQixDQUNmQyxLQURlLEVBRWZDLFFBRmUsRUFHZkMsS0FIZSxFQUlQO0FBQUEsZ0JBTU5BLEtBQUssQ0FBQ0MsVUFBTixJQUFvQixFQU5kO0FB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dUJBQXVCLENBQUMsQ0FBRCxDQUF2QixHQUE2QkMsWUFBWSxDQUFDLENBQUQsQ0FBN0MsQ0FBZixHQUFvRSxDQUEzRTtBQUNEOztBQTFFMkMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBNb2RlUHJvcHMsIFBvaW50ZXJNb3ZlRXZlbnQsIFN0b3BEcmFnZ2luZ0V2ZW50IH0gZnJvbSAnLi4vdHlwZXMuanMnO1xuaW1wb3J0IHR5cGUgeyBQb3NpdGlvbiwgRmVhdHVyZUNvbGxlY3Rpb24gfSBmcm9tICcuLi9nZW9qc29uLXR5cGVzLmpzJztcbmltcG9ydCB7IGdldFBpY2tlZEVkaXRIYW5kbGUsIHR5cGUgR2VvSnNvbkVkaXRBY3Rpb24gfSBmcm9tICcuL2dlb2pzb24tZWRpdC1tb2RlLmpzJztcbmltcG9ydCB7IE1vZGlmeU1vZGUgfSBmcm9tICcuL21vZGlmeS1tb2RlLmpzJztcblxuZnVuY3Rpb24gZGVmYXVsdENhbGN1bGF0ZUVsZXZhdGlvbkNoYW5nZSh7XG4gIHBvaW50ZXJEb3duU2NyZWVuQ29vcmRzLFxuICBzY3JlZW5Db29yZHNcbn06IHtcbiAgcG9pbnRlckRvd25TY3JlZW5Db29yZHM6IFBvc2l0aW9uLFxuICBzY3JlZW5Db29yZHM6IFBvc2l0aW9uXG59KSB7XG4gIHJldHVybiAxMCAqIChwb2ludGVyRG93blNjcmVlbkNvb3Jkc1sxXSAtIHNjcmVlbkNvb3Jkc1sxXSk7XG59XG5cbmV4cG9ydCBjbGFzcyBFbGV2YXRpb25Nb2RlIGV4dGVuZHMgTW9kaWZ5TW9kZSB7XG4gIG1ha2VFbGV2YXRlZEV2ZW50KFxuICAgIGV2ZW50OiBQb2ludGVyTW92ZUV2ZW50IHwgU3RvcERyYWdnaW5nRXZlbnQsXG4gICAgcG9zaXRpb246IFBvc2l0aW9uLFxuICAgIHByb3BzOiBNb2RlUHJvcHM8RmVhdHVyZUNvbGxlY3Rpb24+XG4gICk6IE9iamVjdCB7XG4gICAgY29uc3Qge1xuICAgICAgbWluRWxldmF0aW9uID0gMCxcbiAgICAgIG1heEVsZXZhdGlvbiA9IDIwMDAwLFxuICAgICAgY2FsY3VsYXRlRWxldmF0aW9uQ2hhbmdlID0gZGVmYXVsdENhbGN1bGF0ZUVsZXZhdGlvbkNoYW5nZVxuICAgIH0gPVxuICAgICAgcHJvcHMubW9kZUNvbmZpZyB8fCB7fTtcblxuICAgIGlmICghZXZlbnQucG9pbnRlckRvd25TY3JlZW5Db29yZHMpIHtcbiAgICAgIHJldHVybiBldmVudDtcbiAgICB9XG5cbiAgICAvLyAkRmxvd0ZpeE1lIC0gcmVhbGx5LCBJIGtub3cgaXQgaGFzIHNvbWV0aGluZyBhdCBpbmRleCAyXG4gICAgbGV0IGVsZXZhdGlvbiA9IHBvc2l0aW9uLmxlbmd0aCA9PT0gMyA/IHBvc2l0aW9uWzJdIDogMDtcblxuICAgIC8vIGNhbGN1bGF0ZUVsZXZhdGlvbkNoYW5nZSBpcyBjb25maWd1cmFibGUgYmVjYXVzZSAoYXQgdGhpcyB0aW1lKSBtb2RlcyBhcmUgbm90IGF3YXJlIG9mIHRoZSB2aWV3cG9ydFxuICAgIGVsZXZhdGlvbiArPSBjYWxjdWxhdGVFbGV2YXRpb25DaGFuZ2Uoe1xuICAgICAgcG9pbnRlckRvd25TY3JlZW5Db29yZHM6IGV2ZW50LnBvaW50ZXJEb3duU2NyZWVuQ29vcmRzLFxuICAgICAgc2NyZWVuQ29vcmRzOiBldmVudC5zY3JlZW5Db29yZHNcbiAgICB9KTtcbiAgICBlbGV2YXRpb24gPSBNYXRoLm1pbihlbGV2YXRpb24sIG1heEVsZXZhdGlvbik7XG4gICAgZWxldmF0aW9uID0gTWF0aC5tYXgoZWxldmF0aW9uLCBtaW5FbGV2YXRpb24pO1xuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGV2ZW50LCB7XG4gICAgICBtYXBDb29yZHM6IFtwb3NpdGlvblswXSwgcG9zaXRpb25bMV0sIGVsZXZhdGlvbl1cbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZVBvaW50ZXJNb3ZlQWRhcHRlcihcbiAgICBldmVudDogUG9pbnRlck1vdmVFdmVudCxcbiAgICBwcm9wczogTW9kZVByb3BzPEZlYXR1cmVDb2xsZWN0aW9uPlxuICApOiB7IGVkaXRBY3Rpb246ID9HZW9Kc29uRWRpdEFjdGlvbiwgY2FuY2VsTWFwUGFuOiBib29sZWFuIH0ge1xuICAgIGNvbnN0IGVkaXRIYW5kbGUgPSBnZXRQaWNrZWRFZGl0SGFuZGxlKGV2ZW50LnBvaW50ZXJEb3duUGlja3MpO1xuICAgIGNvbnN0IHBvc2l0aW9uID0gZWRpdEhhbmRsZSA/IGVkaXRIYW5kbGUucG9zaXRpb24gOiBldmVudC5tYXBDb29yZHM7XG4gICAgcmV0dXJuIHN1cGVyLmhhbmRsZVBvaW50ZXJNb3ZlQWRhcHRlcih0aGlzLm1ha2VFbGV2YXRlZEV2ZW50KGV2ZW50LCBwb3NpdGlvbiwgcHJvcHMpLCBwcm9wcyk7XG4gIH1cblxuICBoYW5kbGVTdG9wRHJhZ2dpbmdBZGFwdGVyKFxuICAgIGV2ZW50OiBTdG9wRHJhZ2dpbmdFdmVudCxcbiAgICBwcm9wczogTW9kZVByb3BzPEZlYXR1cmVDb2xsZWN0aW9uPlxuICApOiA/R2VvSnNvbkVkaXRBY3Rpb24ge1xuICAgIGNvbnN0IGVkaXRIYW5kbGUgPSBnZXRQaWNrZWRFZGl0SGFuZGxlKGV2ZW50LnBpY2tzKTtcbiAgICBjb25zdCBwb3NpdGlvbiA9IGVkaXRIYW5kbGUgPyBlZGl0SGFuZGxlLnBvc2l0aW9uIDogZXZlbnQubWFwQ29vcmRzO1xuICAgIHJldHVybiBzdXBlci5oYW5kbGVTdG9wRHJhZ2dpbmdBZGFwdGVyKHRoaXMubWFrZUVsZXZhdGVkRXZlbnQoZXZlbnQsIHBvc2l0aW9uLCBwcm9wcyksIHByb3BzKTtcbiAgfVxuXG4gIGdldEN1cnNvcihldmVudDogUG9pbnRlck1vdmVFdmVudCk6ID9zdHJpbmcge1xuICAgIGxldCBjdXJzb3IgPSBzdXBlci5nZXRDdXJzb3IoZXZlbnQpO1xuICAgIGlmIChjdXJzb3IgPT09ICdjZWxsJykge1xuICAgICAgY3Vyc29yID0gJ25zLXJlc2l6ZSc7XG4gICAgfVxuICAgIHJldHVybiBjdXJzb3I7XG4gIH1cblxuICBzdGF0aWMgY2FsY3VsYXRlRWxldmF0aW9uQ2hhbmdlV2l0aFZpZXdwb3J0KFxuICAgIHZpZXdwb3J0OiBhbnksXG4gICAge1xuICAgICAgcG9pbnRlckRvd25TY3JlZW5Db29yZHMsXG4gICAgICBzY3JlZW5Db29yZHNcbiAgICB9OiB7XG4gICAgICBwb2ludGVyRG93blNjcmVlbkNvb3JkczogUG9zaXRpb24sXG4gICAgICBzY3JlZW5Db29yZHM6IFBvc2l0aW9uXG4gICAgfVxuICApOiBudW1iZXIge1xuICAgIC8vIFNvdXJjZTogaHR0cHM6Ly9naXMuc3RhY2tleGNoYW5nZS5jb20vYS8xMjc5NDkvMTExODA0XG4gICAgY29uc3QgbWV0ZXJzUGVyUGl4ZWwgPVxuICAgICAgKDE1NjU0My4wMzM5MiAqIE1hdGguY29zKCh2aWV3cG9ydC5sYXRpdHVkZSAqIE1hdGguUEkpIC8gMTgwKSkgLyBNYXRoLnBvdygyLCB2aWV3cG9ydC56b29tKTtcblxuICAgIHJldHVybiAobWV0ZXJzUGVyUGl4ZWwgKiAocG9pbnRlckRvd25TY3JlZW5Db29yZHNbMV0gLSBzY3JlZW5Db29yZHNbMV0pKSAvIDI7XG4gIH1cbn1cbiJdfQ==