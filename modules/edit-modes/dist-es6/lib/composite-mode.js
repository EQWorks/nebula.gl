"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CompositeMode = void 0;

var _geojsonEditMode = require("./geojson-edit-mode.js");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class CompositeMode extends _geojsonEditMode.BaseGeoJsonEditMode {
  constructor(handlers) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super();

    _defineProperty(this, "handlers", void 0);

    _defineProperty(this, "options", void 0);

    this.handlers = handlers;
    this.options = options;
  }

  _coalesce(callback) {
    var resultEval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var result;

    for (var i = 0; i < this.handlers.length; i++) {
      result = callback(this.handlers[i]);

      if (resultEval ? resultEval(result) : result) {
        break;
      }
    }

    return result;
  }

  handleClick(event, props) {
    this._coalesce(function (handler) {
      return handler.handleClick(event, props);
    });
  }

  handlePointerMove(event, props) {
    return this._coalesce(function (handler) {
      return handler.handlePointerMove(event, props);
    });
  }

  handleStartDragging(event, props) {
    return this._coalesce(function (handler) {
      return handler.handleStartDragging(event, props);
    });
  }

  handleStopDragging(event, props) {
    return this._coalesce(function (handler) {
      return handler.handleStopDragging(event, props);
    });
  }

  getTentativeFeature() {
    return this._coalesce(function (handler) {
      return handler.getTentativeFeature();
    });
  }

  getEditHandlesAdapter(picks, mapCoords, props) {
    // TODO: Combine the handles *BUT* make sure if none of the results have
    // changed to return the same object so that "editHandles !== this.state.editHandles"
    // in editable-geojson-layer works.
    return this._coalesce(function (handler) {
      return handler.getEditHandlesAdapter(picks, mapCoords, props);
    }, function (handles) {
      return Array.isArray(handles) && handles.length > 0;
    });
  }

  getCursorAdapter(props) {
    return this._coalesce(function (handler) {
      return handler.getCursorAdapter(props);
    });
  }

}

exports.CompositeMode = CompositeMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvY29tcG9zaXRlLW1vZGUuanMiXSwibmFtZXMiOlsiQ29tcG9zaXRlTW9kZSIsIkJhc2VHZW9Kc29uRWRpdE1vZGUiLCJjb25zdHJ1Y3RvciIsImhhbmRsZXJzIiwib3B0aW9ucyIsIl9jb2FsZXNjZSIsImNhbGxiYWNrIiwicmVzdWx0RXZhbCIsInJlc3VsdCIsImkiLCJsZW5ndGgiLCJoYW5kbGVDbGljayIsImV2ZW50IiwicHJvcHMiLCJoYW5kbGVyIiwiaGFuZGxlUG9pbnRlck1vdmUiLCJoYW5kbGVTdGFydERyYWdnaW5nIiwiaGFuZGxlU3RvcERyYWdnaW5nIiwiZ2V0VGVudGF0aXZlRmVhdHVyZSIsImdldEVkaXRIYW5kbGVzQWRhcHRlciIsInBpY2tzIiwibWFwQ29vcmRzIiwiaGFuZGxlcyIsIkFycmF5IiwiaXNBcnJheSIsImdldEN1cnNvckFkYXB0ZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFVQTs7OztBQUVPLE1BQU1BLGFBQU4sU0FBNEJDLG9DQUE1QixDQUFnRDtBQUlyREMsRUFBQUEsV0FBVyxDQUFDQyxRQUFELEVBQTZEO0FBQUEsUUFBdEJDLE9BQXNCLHVFQUFKLEVBQUk7QUFDdEU7O0FBRHNFOztBQUFBOztBQUV0RSxTQUFLRCxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLFNBQUtDLE9BQUwsR0FBZUEsT0FBZjtBQUNEOztBQUVEQyxFQUFBQSxTQUFTLENBQUlDLFFBQUosRUFBK0U7QUFBQSxRQUF2Q0MsVUFBdUMsdUVBQVQsSUFBUztBQUN0RixRQUFJQyxNQUFKOztBQUVBLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxLQUFLTixRQUFMLENBQWNPLE1BQWxDLEVBQTBDRCxDQUFDLEVBQTNDLEVBQStDO0FBQzdDRCxNQUFBQSxNQUFNLEdBQUdGLFFBQVEsQ0FBQyxLQUFLSCxRQUFMLENBQWNNLENBQWQsQ0FBRCxDQUFqQjs7QUFDQSxVQUFJRixVQUFVLEdBQUdBLFVBQVUsQ0FBQ0MsTUFBRCxDQUFiLEdBQXdCQSxNQUF0QyxFQUE4QztBQUM1QztBQUNEO0FBQ0Y7O0FBRUQsV0FBUUEsTUFBUjtBQUNEOztBQUVERyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBb0JDLEtBQXBCLEVBQStEO0FBQ3hFLFNBQUtSLFNBQUwsQ0FBZSxVQUFBUyxPQUFPO0FBQUEsYUFBSUEsT0FBTyxDQUFDSCxXQUFSLENBQW9CQyxLQUFwQixFQUEyQkMsS0FBM0IsQ0FBSjtBQUFBLEtBQXRCO0FBQ0Q7O0FBRURFLEVBQUFBLGlCQUFpQixDQUFDSCxLQUFELEVBQTBCQyxLQUExQixFQUFxRTtBQUNwRixXQUFPLEtBQUtSLFNBQUwsQ0FBZSxVQUFBUyxPQUFPO0FBQUEsYUFBSUEsT0FBTyxDQUFDQyxpQkFBUixDQUEwQkgsS0FBMUIsRUFBaUNDLEtBQWpDLENBQUo7QUFBQSxLQUF0QixDQUFQO0FBQ0Q7O0FBRURHLEVBQUFBLG1CQUFtQixDQUFDSixLQUFELEVBQTRCQyxLQUE1QixFQUF1RTtBQUN4RixXQUFPLEtBQUtSLFNBQUwsQ0FBZSxVQUFBUyxPQUFPO0FBQUEsYUFBSUEsT0FBTyxDQUFDRSxtQkFBUixDQUE0QkosS0FBNUIsRUFBbUNDLEtBQW5DLENBQUo7QUFBQSxLQUF0QixDQUFQO0FBQ0Q7O0FBRURJLEVBQUFBLGtCQUFrQixDQUFDTCxLQUFELEVBQTJCQyxLQUEzQixFQUFzRTtBQUN0RixXQUFPLEtBQUtSLFNBQUwsQ0FBZSxVQUFBUyxPQUFPO0FBQUEsYUFBSUEsT0FBTyxDQUFDRyxrQkFBUixDQUEyQkwsS0FBM0IsRUFBa0NDLEtBQWxDLENBQUo7QUFBQSxLQUF0QixDQUFQO0FBQ0Q7O0FBRURLLEVBQUFBLG1CQUFtQixHQUFhO0FBQzlCLFdBQU8sS0FBS2IsU0FBTCxDQUFlLFVBQUFTLE9BQU87QUFBQSxhQUFJQSxPQUFPLENBQUNJLG1CQUFSLEVBQUo7QUFBQSxLQUF0QixDQUFQO0FBQ0Q7O0FBRURDLEVBQUFBLHFCQUFxQixDQUNuQkMsS0FEbUIsRUFFbkJDLFNBRm1CLEVBR25CUixLQUhtQixFQUlMO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsV0FBTyxLQUFLUixTQUFMLENBQ0wsVUFBQVMsT0FBTztBQUFBLGFBQUlBLE9BQU8sQ0FBQ0sscUJBQVIsQ0FBOEJDLEtBQTlCLEVBQXFDQyxTQUFyQyxFQUFnRFIsS0FBaEQsQ0FBSjtBQUFBLEtBREYsRUFFTCxVQUFBUyxPQUFPO0FBQUEsYUFBSUMsS0FBSyxDQUFDQyxPQUFOLENBQWNGLE9BQWQsS0FBMEJBLE9BQU8sQ0FBQ1osTUFBUixHQUFpQixDQUEvQztBQUFBLEtBRkYsQ0FBUDtBQUlEOztBQUVEZSxFQUFBQSxnQkFBZ0IsQ0FBQ1osS0FBRCxFQUErQztBQUM3RCxXQUFPLEtBQUtSLFNBQUwsQ0FBZSxVQUFBUyxPQUFPO0FBQUEsYUFBSUEsT0FBTyxDQUFDVyxnQkFBUixDQUF5QlosS0FBekIsQ0FBSjtBQUFBLEtBQXRCLENBQVA7QUFDRDs7QUEzRG9EIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IHR5cGUgeyBGZWF0dXJlQ29sbGVjdGlvbiwgRmVhdHVyZSwgUG9zaXRpb24gfSBmcm9tICcuLi9nZW9qc29uLXR5cGVzLmpzJztcbmltcG9ydCB0eXBlIHtcbiAgTW9kZVByb3BzLFxuICBDbGlja0V2ZW50LFxuICBQb2ludGVyTW92ZUV2ZW50LFxuICBTdGFydERyYWdnaW5nRXZlbnQsXG4gIFN0b3BEcmFnZ2luZ0V2ZW50XG59IGZyb20gJy4uL3R5cGVzLmpzJztcbmltcG9ydCB7IEJhc2VHZW9Kc29uRWRpdE1vZGUsIHR5cGUgRWRpdEhhbmRsZSB9IGZyb20gJy4vZ2VvanNvbi1lZGl0LW1vZGUuanMnO1xuXG5leHBvcnQgY2xhc3MgQ29tcG9zaXRlTW9kZSBleHRlbmRzIEJhc2VHZW9Kc29uRWRpdE1vZGUge1xuICBoYW5kbGVyczogQXJyYXk8QmFzZUdlb0pzb25FZGl0TW9kZT47XG4gIG9wdGlvbnM6IE9iamVjdDtcblxuICBjb25zdHJ1Y3RvcihoYW5kbGVyczogQXJyYXk8QmFzZUdlb0pzb25FZGl0TW9kZT4sIG9wdGlvbnM6IE9iamVjdCA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmhhbmRsZXJzID0gaGFuZGxlcnM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIF9jb2FsZXNjZTxUPihjYWxsYmFjazogQmFzZUdlb0pzb25FZGl0TW9kZSA9PiBULCByZXN1bHRFdmFsOiA/KFQpID0+IGJvb2xlYW4gPSBudWxsKTogVCB7XG4gICAgbGV0IHJlc3VsdDogVDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5oYW5kbGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0ID0gY2FsbGJhY2sodGhpcy5oYW5kbGVyc1tpXSk7XG4gICAgICBpZiAocmVzdWx0RXZhbCA/IHJlc3VsdEV2YWwocmVzdWx0KSA6IHJlc3VsdCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKHJlc3VsdDogYW55KTtcbiAgfVxuXG4gIGhhbmRsZUNsaWNrKGV2ZW50OiBDbGlja0V2ZW50LCBwcm9wczogTW9kZVByb3BzPEZlYXR1cmVDb2xsZWN0aW9uPik6IHZvaWQge1xuICAgIHRoaXMuX2NvYWxlc2NlKGhhbmRsZXIgPT4gaGFuZGxlci5oYW5kbGVDbGljayhldmVudCwgcHJvcHMpKTtcbiAgfVxuXG4gIGhhbmRsZVBvaW50ZXJNb3ZlKGV2ZW50OiBQb2ludGVyTW92ZUV2ZW50LCBwcm9wczogTW9kZVByb3BzPEZlYXR1cmVDb2xsZWN0aW9uPik6IHZvaWQge1xuICAgIHJldHVybiB0aGlzLl9jb2FsZXNjZShoYW5kbGVyID0+IGhhbmRsZXIuaGFuZGxlUG9pbnRlck1vdmUoZXZlbnQsIHByb3BzKSk7XG4gIH1cblxuICBoYW5kbGVTdGFydERyYWdnaW5nKGV2ZW50OiBTdGFydERyYWdnaW5nRXZlbnQsIHByb3BzOiBNb2RlUHJvcHM8RmVhdHVyZUNvbGxlY3Rpb24+KTogdm9pZCB7XG4gICAgcmV0dXJuIHRoaXMuX2NvYWxlc2NlKGhhbmRsZXIgPT4gaGFuZGxlci5oYW5kbGVTdGFydERyYWdnaW5nKGV2ZW50LCBwcm9wcykpO1xuICB9XG5cbiAgaGFuZGxlU3RvcERyYWdnaW5nKGV2ZW50OiBTdG9wRHJhZ2dpbmdFdmVudCwgcHJvcHM6IE1vZGVQcm9wczxGZWF0dXJlQ29sbGVjdGlvbj4pOiB2b2lkIHtcbiAgICByZXR1cm4gdGhpcy5fY29hbGVzY2UoaGFuZGxlciA9PiBoYW5kbGVyLmhhbmRsZVN0b3BEcmFnZ2luZyhldmVudCwgcHJvcHMpKTtcbiAgfVxuXG4gIGdldFRlbnRhdGl2ZUZlYXR1cmUoKTogP0ZlYXR1cmUge1xuICAgIHJldHVybiB0aGlzLl9jb2FsZXNjZShoYW5kbGVyID0+IGhhbmRsZXIuZ2V0VGVudGF0aXZlRmVhdHVyZSgpKTtcbiAgfVxuXG4gIGdldEVkaXRIYW5kbGVzQWRhcHRlcihcbiAgICBwaWNrczogP0FycmF5PE9iamVjdD4sXG4gICAgbWFwQ29vcmRzOiA/UG9zaXRpb24sXG4gICAgcHJvcHM6IE1vZGVQcm9wczxGZWF0dXJlQ29sbGVjdGlvbj5cbiAgKTogRWRpdEhhbmRsZVtdIHtcbiAgICAvLyBUT0RPOiBDb21iaW5lIHRoZSBoYW5kbGVzICpCVVQqIG1ha2Ugc3VyZSBpZiBub25lIG9mIHRoZSByZXN1bHRzIGhhdmVcbiAgICAvLyBjaGFuZ2VkIHRvIHJldHVybiB0aGUgc2FtZSBvYmplY3Qgc28gdGhhdCBcImVkaXRIYW5kbGVzICE9PSB0aGlzLnN0YXRlLmVkaXRIYW5kbGVzXCJcbiAgICAvLyBpbiBlZGl0YWJsZS1nZW9qc29uLWxheWVyIHdvcmtzLlxuICAgIHJldHVybiB0aGlzLl9jb2FsZXNjZShcbiAgICAgIGhhbmRsZXIgPT4gaGFuZGxlci5nZXRFZGl0SGFuZGxlc0FkYXB0ZXIocGlja3MsIG1hcENvb3JkcywgcHJvcHMpLFxuICAgICAgaGFuZGxlcyA9PiBBcnJheS5pc0FycmF5KGhhbmRsZXMpICYmIGhhbmRsZXMubGVuZ3RoID4gMFxuICAgICk7XG4gIH1cblxuICBnZXRDdXJzb3JBZGFwdGVyKHByb3BzOiBNb2RlUHJvcHM8RmVhdHVyZUNvbGxlY3Rpb24+KTogP3N0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2NvYWxlc2NlKGhhbmRsZXIgPT4gaGFuZGxlci5nZXRDdXJzb3JBZGFwdGVyKHByb3BzKSk7XG4gIH1cbn1cbiJdfQ==