"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModifyMode = void 0;

var _nearestPointOnLine = _interopRequireDefault(require("@turf/nearest-point-on-line"));

var _helpers = require("@turf/helpers");

var _utils = require("../utils.js");

var _geojsonEditMode = require("./geojson-edit-mode.js");

var _immutableFeatureCollection = require("./immutable-feature-collection.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

class ModifyMode extends _geojsonEditMode.BaseGeoJsonEditMode {
  getEditHandlesAdapter(picks, mapCoords, props) {
    var _this = this;

    var handles = [];
    var features = props.data.features;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = props.selectedIndexes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _index = _step.value;

        if (_index < features.length) {
          var _handles;

          var geometry = features[_index].geometry;

          (_handles = handles).push.apply(_handles, _toConsumableArray((0, _geojsonEditMode.getEditHandlesForGeometry)(geometry, _index)));
        } else {
          console.warn("selectedFeatureIndexes out of range ".concat(_index)); // eslint-disable-line no-console,no-undef
        }
      } // intermediate edit handle

    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (picks && picks.length && mapCoords) {
      var existingEditHandle = (0, _geojsonEditMode.getPickedExistingEditHandle)(picks); // don't show intermediate point when too close to an existing edit handle

      var featureAsPick = !existingEditHandle && picks.find(function (pick) {
        return !pick.isGuide;
      }); // is the feature in the pick selected

      if (featureAsPick && !featureAsPick.object.geometry.type.includes('Point') && props.selectedIndexes.includes(featureAsPick.index)) {
        var intermediatePoint = null;
        var positionIndexPrefix = [];
        var referencePoint = (0, _helpers.point)(mapCoords); // process all lines of the (single) feature

        (0, _utils.recursivelyTraverseNestedArrays)(featureAsPick.object.geometry.coordinates, [], function (lineString, prefix) {
          var lineStringFeature = (0, _helpers.lineString)(lineString);

          var candidateIntermediatePoint = _this.nearestPointOnLine(lineStringFeature, referencePoint, props.modeConfig && props.modeConfig.viewport);

          if (!intermediatePoint || candidateIntermediatePoint.properties.dist < intermediatePoint.properties.dist) {
            intermediatePoint = candidateIntermediatePoint;
            positionIndexPrefix = prefix;
          }
        }); // tack on the lone intermediate point to the set of handles

        if (intermediatePoint) {
          var _intermediatePoint = intermediatePoint,
              position = _intermediatePoint.geometry.coordinates,
              index = _intermediatePoint.properties.index;
          handles = _toConsumableArray(handles).concat([{
            position: position,
            positionIndexes: _toConsumableArray(positionIndexPrefix).concat([index + 1]),
            featureIndex: featureAsPick.index,
            type: 'intermediate'
          }]);
        }
      }
    }

    return handles;
  } // turf.js does not support elevation for nearestPointOnLine


  nearestPointOnLine(line, inPoint, viewport) {
    var coordinates = line.geometry.coordinates;

    if (coordinates.some(function (coord) {
      return coord.length > 2;
    })) {
      if (viewport) {
        // This line has elevation, we need to use alternative algorithm
        return (0, _utils.nearestPointOnProjectedLine)(line, inPoint, viewport);
      } // eslint-disable-next-line no-console,no-undef


      console.log('Editing 3D point but modeConfig.viewport not provided. Falling back to 2D logic.');
    }

    return (0, _nearestPointOnLine.default)(line, inPoint);
  }

  handleClickAdapter(event, props) {
    var editAction = null;
    var pickedExistingHandle = (0, _geojsonEditMode.getPickedExistingEditHandle)(event.picks);
    var pickedIntermediateHandle = (0, _geojsonEditMode.getPickedIntermediateEditHandle)(event.picks);

    if (pickedExistingHandle) {
      var updatedData;

      try {
        updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).removePosition(pickedExistingHandle.featureIndex, pickedExistingHandle.positionIndexes).getObject();
      } catch (ignored) {// This happens if user attempts to remove the last point
      }

      if (updatedData) {
        editAction = {
          updatedData: updatedData,
          editType: 'removePosition',
          editContext: {
            featureIndexes: [pickedExistingHandle.featureIndex],
            positionIndexes: pickedExistingHandle.positionIndexes,
            position: pickedExistingHandle.position
          }
        };
      }
    } else if (pickedIntermediateHandle) {
      var _updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).addPosition(pickedIntermediateHandle.featureIndex, pickedIntermediateHandle.positionIndexes, pickedIntermediateHandle.position).getObject();

      if (_updatedData) {
        editAction = {
          updatedData: _updatedData,
          editType: 'addPosition',
          editContext: {
            featureIndexes: [pickedIntermediateHandle.featureIndex],
            positionIndexes: pickedIntermediateHandle.positionIndexes,
            position: pickedIntermediateHandle.position
          }
        };
      }
    }

    return editAction;
  }

  handlePointerMove(event, props) {
    var editAction = null;
    var editHandle = (0, _geojsonEditMode.getPickedEditHandle)(event.pointerDownPicks);

    if (event.isDragging && editHandle) {
      var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).replacePosition(editHandle.featureIndex, editHandle.positionIndexes, event.mapCoords).getObject();
      editAction = {
        updatedData: updatedData,
        editType: 'movePosition',
        editContext: {
          featureIndexes: [editHandle.featureIndex],
          positionIndexes: editHandle.positionIndexes,
          position: event.mapCoords
        }
      };
      props.onEdit(editAction);
    }

    var cursor = this.getCursor(event);
    props.onUpdateCursor(cursor); // Cancel map panning if pointer went down on an edit handle

    var cancelMapPan = Boolean(editHandle);

    if (cancelMapPan) {
      event.sourceEvent.stopPropagation();
    }
  }

  handleStartDraggingAdapter(event, props) {
    var editAction = null;
    var selectedFeatureIndexes = props.selectedIndexes;
    var editHandle = (0, _geojsonEditMode.getPickedIntermediateEditHandle)(event.picks);

    if (selectedFeatureIndexes.length && editHandle) {
      var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).addPosition(editHandle.featureIndex, editHandle.positionIndexes, event.mapCoords).getObject();
      editAction = {
        updatedData: updatedData,
        editType: 'addPosition',
        editContext: {
          featureIndexes: [editHandle.featureIndex],
          positionIndexes: editHandle.positionIndexes,
          position: event.mapCoords
        }
      };
    }

    return editAction;
  }

  handleStopDraggingAdapter(event, props) {
    var editAction = null;
    var selectedFeatureIndexes = props.selectedIndexes;
    var editHandle = (0, _geojsonEditMode.getPickedEditHandle)(event.picks);

    if (selectedFeatureIndexes.length && editHandle) {
      var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).replacePosition(editHandle.featureIndex, editHandle.positionIndexes, event.mapCoords).getObject();
      editAction = {
        updatedData: updatedData,
        editType: 'finishMovePosition',
        editContext: {
          featureIndexes: [editHandle.featureIndex],
          positionIndexes: editHandle.positionIndexes,
          position: event.mapCoords
        }
      };
    }

    return editAction;
  }

  getCursor(event) {
    var picks = event && event.picks || [];
    var handlesPicked = (0, _geojsonEditMode.getPickedEditHandles)(picks);

    if (handlesPicked.length) {
      return 'cell';
    }

    return null;
  }

}

exports.ModifyMode = ModifyMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,