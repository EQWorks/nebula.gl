"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExtrudeMode = void 0;

var _bearing = _interopRequireDefault(require("@turf/bearing"));

var _utils = require("../utils.js");

var _geojsonEditMode = require("./geojson-edit-mode.js");

var _modifyMode = require("./modify-mode.js");

var _immutableFeatureCollection = require("./immutable-feature-collection.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ExtrudeMode extends _modifyMode.ModifyMode {
  constructor() {
    super(...arguments);

    _defineProperty(this, "isPointAdded", false);
  }

  handlePointerMove(event, props) {
    var editAction = null;
    var editHandle = (0, _geojsonEditMode.getPickedEditHandle)(event.pointerDownPicks);

    if (event.isDragging && editHandle) {
      var size = this.coordinatesSize(editHandle.positionIndexes, editHandle.featureIndex, props.data);
      var positionIndexes = this.isPointAdded ? this.nextPositionIndexes(editHandle.positionIndexes, size) : editHandle.positionIndexes; // p1 and p1 are end points for edge

      var p1 = this.getPointForPositionIndexes(this.prevPositionIndexes(positionIndexes, size), editHandle.featureIndex, props.data);
      var p2 = this.getPointForPositionIndexes(positionIndexes, editHandle.featureIndex, props.data);

      if (p1 && p2) {
        // p3 and p4 are end points for moving (extruding) edge
        var _generatePointsParall = (0, _utils.generatePointsParallelToLinePoints)(p1, p2, event.mapCoords),
            _generatePointsParall2 = _slicedToArray(_generatePointsParall, 2),
            p3 = _generatePointsParall2[0],
            p4 = _generatePointsParall2[1];

        var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).replacePosition(editHandle.featureIndex, this.prevPositionIndexes(positionIndexes, size), p4).replacePosition(editHandle.featureIndex, positionIndexes, p3).getObject();
        editAction = {
          updatedData: updatedData,
          editType: 'extruding',
          editContext: {
            featureIndexes: [editHandle.featureIndex],
            positionIndexes: this.nextPositionIndexes(editHandle.positionIndexes, size),
            position: p3
          }
        };
        props.onEdit(editAction);
      }
    }

    var cursor = this.getCursor(event);
    props.onUpdateCursor(cursor); // Cancel map panning if pointer went down on an edit handle

    var cancelMapPan = Boolean(editHandle);

    if (cancelMapPan) {
      event.sourceEvent.stopPropagation();
    }
  }

  handleStartDraggingAdapter(event, props) {
    var editAction = null;
    var selectedFeatureIndexes = props.selectedIndexes;
    var editHandle = (0, _geojsonEditMode.getPickedEditHandle)(event.picks);

    if (selectedFeatureIndexes.length && editHandle && editHandle.type === 'intermediate') {
      var size = this.coordinatesSize(editHandle.positionIndexes, editHandle.featureIndex, props.data); // p1 and p1 are end points for edge

      var p1 = this.getPointForPositionIndexes(this.prevPositionIndexes(editHandle.positionIndexes, size), editHandle.featureIndex, props.data);
      var p2 = this.getPointForPositionIndexes(editHandle.positionIndexes, editHandle.featureIndex, props.data);

      if (p1 && p2) {
        var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data);

        if (!this.isOrthogonal(editHandle.positionIndexes, editHandle.featureIndex, size, props.data)) {
          updatedData = updatedData.addPosition(editHandle.featureIndex, editHandle.positionIndexes, p2);
        }

        if (!this.isOrthogonal(this.prevPositionIndexes(editHandle.positionIndexes, size), editHandle.featureIndex, size, props.data)) {
          updatedData = updatedData.addPosition(editHandle.featureIndex, editHandle.positionIndexes, p1);
          this.isPointAdded = true;
        }

        editAction = {
          updatedData: updatedData.getObject(),
          editType: 'startExtruding',
          editContext: {
            featureIndexes: [editHandle.featureIndex],
            positionIndexes: editHandle.positionIndexes,
            position: p1
          }
        };
      }
    }

    return editAction;
  }

  handleStopDraggingAdapter(event, props) {
    var editAction = null;
    var selectedFeatureIndexes = props.selectedIndexes;
    var editHandle = (0, _geojsonEditMode.getPickedEditHandle)(event.picks);

    if (selectedFeatureIndexes.length && editHandle) {
      var size = this.coordinatesSize(editHandle.positionIndexes, editHandle.featureIndex, props.data);
      var positionIndexes = this.isPointAdded ? this.nextPositionIndexes(editHandle.positionIndexes, size) : editHandle.positionIndexes; // p1 and p1 are end points for edge

      var p1 = this.getPointForPositionIndexes(this.prevPositionIndexes(positionIndexes, size), editHandle.featureIndex, props.data);
      var p2 = this.getPointForPositionIndexes(positionIndexes, editHandle.featureIndex, props.data);

      if (p1 && p2) {
        // p3 and p4 are end points for new moved (extruded) edge
        var _generatePointsParall3 = (0, _utils.generatePointsParallelToLinePoints)(p1, p2, event.mapCoords),
            _generatePointsParall4 = _slicedToArray(_generatePointsParall3, 2),
            p3 = _generatePointsParall4[0],
            p4 = _generatePointsParall4[1];

        var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).replacePosition(editHandle.featureIndex, this.prevPositionIndexes(positionIndexes, size), p4).replacePosition(editHandle.featureIndex, positionIndexes, p3).getObject();
        editAction = {
          updatedData: updatedData,
          editType: 'extruded',
          editContext: {
            featureIndexes: [editHandle.featureIndex],
            positionIndexes: editHandle.positionIndexes,
            position: p3
          }
        };
      }
    }

    this.isPointAdded = false;
    return editAction;
  }

  coordinatesSize(positionIndexes, featureIndex, _ref) {
    var features = _ref.features;
    var size = 0;
    var feature = features[featureIndex];
    var coordinates = feature.geometry.coordinates; // for Multi polygons, length will be 3

    if (positionIndexes.length === 3) {
      var _positionIndexes = _slicedToArray(positionIndexes, 2),
          a = _positionIndexes[0],
          b = _positionIndexes[1];

      if (coordinates.length && coordinates[a].length) {
        size = coordinates[a][b].length;
      }
    } else {
      var _positionIndexes2 = _slicedToArray(positionIndexes, 1),
          _b = _positionIndexes2[0];

      if (coordinates.length && coordinates[_b].length) {
        size = coordinates[_b].length;
      }
    }

    return size;
  }

  getBearing(p1, p2) {
    var angle = (0, _bearing.default)(p1, p2);

    if (angle < 0) {
      return Math.floor(360 + angle);
    }

    return Math.floor(angle);
  }

  isOrthogonal(positionIndexes, featureIndex, size, features) {
    if (positionIndexes[positionIndexes.length - 1] === size - 1) {
      positionIndexes[positionIndexes.length - 1] = 0;
    }

    var prevPoint = this.getPointForPositionIndexes(this.prevPositionIndexes(positionIndexes, size), featureIndex, features);
    var nextPoint = this.getPointForPositionIndexes(this.nextPositionIndexes(positionIndexes, size), featureIndex, features);
    var currentPoint = this.getPointForPositionIndexes(positionIndexes, featureIndex, features);
    var prevAngle = this.getBearing(currentPoint, prevPoint);
    var nextAngle = this.getBearing(currentPoint, nextPoint);
    return [89, 90, 91, 269, 270, 271].includes(Math.abs(prevAngle - nextAngle));
  }

  nextPositionIndexes(positionIndexes, size) {
    var next = _toConsumableArray(positionIndexes);

    if (next.length) {
      next[next.length - 1] = next[next.length - 1] === size - 1 ? 0 : next[next.length - 1] + 1;
    }

    return next;
  }

  prevPositionIndexes(positionIndexes, size) {
    var prev = _toConsumableArray(positionIndexes);

    if (prev.length) {
      prev[prev.length - 1] = prev[prev.length - 1] === 0 ? size - 2 : prev[prev.length - 1] - 1;
    }

    return prev;
  }

  getPointForPositionIndexes(positionIndexes, featureIndex, _ref2) {
    var features = _ref2.features;
    var p1;
    var feature = features[featureIndex];
    var coordinates = feature.geometry.coordinates; // for Multi polygons, length will be 3

    if (positionIndexes.length === 3) {
      var _positionIndexes3 = _slicedToArray(positionIndexes, 3),
          a = _positionIndexes3[0],
          b = _positionIndexes3[1],
          c = _positionIndexes3[2];

      if (coordinates.length && coordinates[a].length) {
        p1 = coordinates[a][b][c];
      }
    } else {
      var _positionIndexes4 = _slicedToArray(positionIndexes, 2),
          _b2 = _positionIndexes4[0],
          _c = _positionIndexes4[1];

      if (coordinates.length && coordinates[_b2].length) {
        p1 = coordinates[_b2][_c];
      }
    }

    return p1;
  }

}

exports.ExtrudeMode = ExtrudeMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,