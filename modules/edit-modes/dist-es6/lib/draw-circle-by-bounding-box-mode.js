"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DrawCircleByBoundingBoxMode = void 0;

var _circle = _interopRequireDefault(require("@turf/circle"));

var _distance = _interopRequireDefault(require("@turf/distance"));

var _geojsonEditMode = require("./geojson-edit-mode.js");

var _twoClickPolygonMode = require("./two-click-polygon-mode.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class DrawCircleByBoundingBoxMode extends _twoClickPolygonMode.TwoClickPolygonMode {
  handlePointerMoveAdapter(event, props) {
    var result = {
      editAction: null,
      cancelMapPan: false
    };
    var clickSequence = this.getClickSequence();

    if (clickSequence.length === 0) {
      // nothing to do yet
      return result;
    }

    var modeConfig = props.modeConfig || {}; // Default turf value for circle is 64

    var _modeConfig$steps = modeConfig.steps,
        steps = _modeConfig$steps === void 0 ? 64 : _modeConfig$steps;
    var options = {
      steps: steps
    };

    if (steps < 4) {
      console.warn("Minimum steps to draw a circle is 4 "); // eslint-disable-line no-console,no-undef

      options.steps = 4;
    }

    var firstClickedPoint = clickSequence[0];
    var centerCoordinates = (0, _geojsonEditMode.getIntermediatePosition)(firstClickedPoint, event.mapCoords);
    var radius = Math.max((0, _distance.default)(firstClickedPoint, centerCoordinates), 0.001);

    this._setTentativeFeature((0, _circle.default)(centerCoordinates, radius, options));

    return result;
  }

}

exports.DrawCircleByBoundingBoxMode = DrawCircleByBoundingBoxMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZHJhdy1jaXJjbGUtYnktYm91bmRpbmctYm94LW1vZGUuanMiXSwibmFtZXMiOlsiRHJhd0NpcmNsZUJ5Qm91bmRpbmdCb3hNb2RlIiwiVHdvQ2xpY2tQb2x5Z29uTW9kZSIsImhhbmRsZVBvaW50ZXJNb3ZlQWRhcHRlciIsImV2ZW50IiwicHJvcHMiLCJyZXN1bHQiLCJlZGl0QWN0aW9uIiwiY2FuY2VsTWFwUGFuIiwiY2xpY2tTZXF1ZW5jZSIsImdldENsaWNrU2VxdWVuY2UiLCJsZW5ndGgiLCJtb2RlQ29uZmlnIiwic3RlcHMiLCJvcHRpb25zIiwiY29uc29sZSIsIndhcm4iLCJmaXJzdENsaWNrZWRQb2ludCIsImNlbnRlckNvb3JkaW5hdGVzIiwibWFwQ29vcmRzIiwicmFkaXVzIiwiTWF0aCIsIm1heCIsIl9zZXRUZW50YXRpdmVGZWF0dXJlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7O0FBQ0E7O0FBR0E7O0FBQ0E7Ozs7QUFFTyxNQUFNQSwyQkFBTixTQUEwQ0Msd0NBQTFDLENBQThEO0FBQ25FQyxFQUFBQSx3QkFBd0IsQ0FDdEJDLEtBRHNCLEVBRXRCQyxLQUZzQixFQUdxQztBQUMzRCxRQUFNQyxNQUFNLEdBQUc7QUFBRUMsTUFBQUEsVUFBVSxFQUFFLElBQWQ7QUFBb0JDLE1BQUFBLFlBQVksRUFBRTtBQUFsQyxLQUFmO0FBQ0EsUUFBTUMsYUFBYSxHQUFHLEtBQUtDLGdCQUFMLEVBQXRCOztBQUVBLFFBQUlELGFBQWEsQ0FBQ0UsTUFBZCxLQUF5QixDQUE3QixFQUFnQztBQUM5QjtBQUNBLGFBQU9MLE1BQVA7QUFDRDs7QUFFRCxRQUFNTSxVQUFVLEdBQUdQLEtBQUssQ0FBQ08sVUFBTixJQUFvQixFQUF2QyxDQVQyRCxDQVUzRDs7QUFWMkQsNEJBV3BDQSxVQVhvQyxDQVduREMsS0FYbUQ7QUFBQSxRQVduREEsS0FYbUQsa0NBVzNDLEVBWDJDO0FBWTNELFFBQU1DLE9BQU8sR0FBRztBQUFFRCxNQUFBQSxLQUFLLEVBQUxBO0FBQUYsS0FBaEI7O0FBRUEsUUFBSUEsS0FBSyxHQUFHLENBQVosRUFBZTtBQUNiRSxNQUFBQSxPQUFPLENBQUNDLElBQVIseUNBRGEsQ0FDeUM7O0FBQ3RERixNQUFBQSxPQUFPLENBQUNELEtBQVIsR0FBZ0IsQ0FBaEI7QUFDRDs7QUFFRCxRQUFNSSxpQkFBaUIsR0FBR1IsYUFBYSxDQUFDLENBQUQsQ0FBdkM7QUFDQSxRQUFNUyxpQkFBaUIsR0FBRyw4Q0FBd0JELGlCQUF4QixFQUEyQ2IsS0FBSyxDQUFDZSxTQUFqRCxDQUExQjtBQUNBLFFBQU1DLE1BQU0sR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQVMsdUJBQVNMLGlCQUFULEVBQTRCQyxpQkFBNUIsQ0FBVCxFQUF5RCxLQUF6RCxDQUFmOztBQUNBLFNBQUtLLG9CQUFMLENBQTBCLHFCQUFPTCxpQkFBUCxFQUEwQkUsTUFBMUIsRUFBa0NOLE9BQWxDLENBQTFCOztBQUVBLFdBQU9SLE1BQVA7QUFDRDs7QUE3QmtFIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IGNpcmNsZSBmcm9tICdAdHVyZi9jaXJjbGUnO1xuaW1wb3J0IGRpc3RhbmNlIGZyb20gJ0B0dXJmL2Rpc3RhbmNlJztcbmltcG9ydCB0eXBlIHsgUG9pbnRlck1vdmVFdmVudCwgTW9kZVByb3BzIH0gZnJvbSAnLi4vdHlwZXMuanMnO1xuaW1wb3J0IHR5cGUgeyBGZWF0dXJlQ29sbGVjdGlvbiB9IGZyb20gJy4uL2dlb2pzb24tdHlwZXMuanMnO1xuaW1wb3J0IHsgZ2V0SW50ZXJtZWRpYXRlUG9zaXRpb24sIHR5cGUgR2VvSnNvbkVkaXRBY3Rpb24gfSBmcm9tICcuL2dlb2pzb24tZWRpdC1tb2RlLmpzJztcbmltcG9ydCB7IFR3b0NsaWNrUG9seWdvbk1vZGUgfSBmcm9tICcuL3R3by1jbGljay1wb2x5Z29uLW1vZGUuanMnO1xuXG5leHBvcnQgY2xhc3MgRHJhd0NpcmNsZUJ5Qm91bmRpbmdCb3hNb2RlIGV4dGVuZHMgVHdvQ2xpY2tQb2x5Z29uTW9kZSB7XG4gIGhhbmRsZVBvaW50ZXJNb3ZlQWRhcHRlcihcbiAgICBldmVudDogUG9pbnRlck1vdmVFdmVudCxcbiAgICBwcm9wczogTW9kZVByb3BzPEZlYXR1cmVDb2xsZWN0aW9uPlxuICApOiB7IGVkaXRBY3Rpb246ID9HZW9Kc29uRWRpdEFjdGlvbiwgY2FuY2VsTWFwUGFuOiBib29sZWFuIH0ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHsgZWRpdEFjdGlvbjogbnVsbCwgY2FuY2VsTWFwUGFuOiBmYWxzZSB9O1xuICAgIGNvbnN0IGNsaWNrU2VxdWVuY2UgPSB0aGlzLmdldENsaWNrU2VxdWVuY2UoKTtcblxuICAgIGlmIChjbGlja1NlcXVlbmNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gbm90aGluZyB0byBkbyB5ZXRcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgY29uc3QgbW9kZUNvbmZpZyA9IHByb3BzLm1vZGVDb25maWcgfHwge307XG4gICAgLy8gRGVmYXVsdCB0dXJmIHZhbHVlIGZvciBjaXJjbGUgaXMgNjRcbiAgICBjb25zdCB7IHN0ZXBzID0gNjQgfSA9IG1vZGVDb25maWc7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHsgc3RlcHMgfTtcblxuICAgIGlmIChzdGVwcyA8IDQpIHtcbiAgICAgIGNvbnNvbGUud2FybihgTWluaW11bSBzdGVwcyB0byBkcmF3IGEgY2lyY2xlIGlzIDQgYCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZSxuby11bmRlZlxuICAgICAgb3B0aW9ucy5zdGVwcyA9IDQ7XG4gICAgfVxuXG4gICAgY29uc3QgZmlyc3RDbGlja2VkUG9pbnQgPSBjbGlja1NlcXVlbmNlWzBdO1xuICAgIGNvbnN0IGNlbnRlckNvb3JkaW5hdGVzID0gZ2V0SW50ZXJtZWRpYXRlUG9zaXRpb24oZmlyc3RDbGlja2VkUG9pbnQsIGV2ZW50Lm1hcENvb3Jkcyk7XG4gICAgY29uc3QgcmFkaXVzID0gTWF0aC5tYXgoZGlzdGFuY2UoZmlyc3RDbGlja2VkUG9pbnQsIGNlbnRlckNvb3JkaW5hdGVzKSwgMC4wMDEpO1xuICAgIHRoaXMuX3NldFRlbnRhdGl2ZUZlYXR1cmUoY2lyY2xlKGNlbnRlckNvb3JkaW5hdGVzLCByYWRpdXMsIG9wdGlvbnMpKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiJdfQ==