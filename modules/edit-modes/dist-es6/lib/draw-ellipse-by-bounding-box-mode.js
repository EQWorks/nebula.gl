"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DrawEllipseByBoundingBoxMode = void 0;

var _bboxPolygon = _interopRequireDefault(require("@turf/bbox-polygon"));

var _distance = _interopRequireDefault(require("@turf/distance"));

var _ellipse = _interopRequireDefault(require("@turf/ellipse"));

var _helpers = require("@turf/helpers");

var _geojsonEditMode = require("./geojson-edit-mode.js");

var _twoClickPolygonMode = require("./two-click-polygon-mode.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class DrawEllipseByBoundingBoxMode extends _twoClickPolygonMode.TwoClickPolygonMode {
  handlePointerMoveAdapter(event) {
    var result = {
      editAction: null,
      cancelMapPan: false
    };
    var clickSequence = this.getClickSequence();

    if (clickSequence.length === 0) {
      // nothing to do yet
      return result;
    }

    var corner1 = clickSequence[0];
    var corner2 = event.mapCoords;
    var minX = Math.min(corner1[0], corner2[0]);
    var minY = Math.min(corner1[1], corner2[1]);
    var maxX = Math.max(corner1[0], corner2[0]);
    var maxY = Math.max(corner1[1], corner2[1]);
    var polygonPoints = (0, _bboxPolygon.default)([minX, minY, maxX, maxY]).geometry.coordinates[0];
    var centerCoordinates = (0, _geojsonEditMode.getIntermediatePosition)(corner1, corner2);
    var xSemiAxis = Math.max((0, _distance.default)((0, _helpers.point)(polygonPoints[0]), (0, _helpers.point)(polygonPoints[1])), 0.001);
    var ySemiAxis = Math.max((0, _distance.default)((0, _helpers.point)(polygonPoints[0]), (0, _helpers.point)(polygonPoints[3])), 0.001);

    this._setTentativeFeature((0, _ellipse.default)(centerCoordinates, xSemiAxis, ySemiAxis));

    return result;
  }

}

exports.DrawEllipseByBoundingBoxMode = DrawEllipseByBoundingBoxMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZHJhdy1lbGxpcHNlLWJ5LWJvdW5kaW5nLWJveC1tb2RlLmpzIl0sIm5hbWVzIjpbIkRyYXdFbGxpcHNlQnlCb3VuZGluZ0JveE1vZGUiLCJUd29DbGlja1BvbHlnb25Nb2RlIiwiaGFuZGxlUG9pbnRlck1vdmVBZGFwdGVyIiwiZXZlbnQiLCJyZXN1bHQiLCJlZGl0QWN0aW9uIiwiY2FuY2VsTWFwUGFuIiwiY2xpY2tTZXF1ZW5jZSIsImdldENsaWNrU2VxdWVuY2UiLCJsZW5ndGgiLCJjb3JuZXIxIiwiY29ybmVyMiIsIm1hcENvb3JkcyIsIm1pblgiLCJNYXRoIiwibWluIiwibWluWSIsIm1heFgiLCJtYXgiLCJtYXhZIiwicG9seWdvblBvaW50cyIsImdlb21ldHJ5IiwiY29vcmRpbmF0ZXMiLCJjZW50ZXJDb29yZGluYXRlcyIsInhTZW1pQXhpcyIsInlTZW1pQXhpcyIsIl9zZXRUZW50YXRpdmVGZWF0dXJlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7QUFFTyxNQUFNQSw0QkFBTixTQUEyQ0Msd0NBQTNDLENBQStEO0FBQ3BFQyxFQUFBQSx3QkFBd0IsQ0FDdEJDLEtBRHNCLEVBRXFDO0FBQzNELFFBQU1DLE1BQU0sR0FBRztBQUFFQyxNQUFBQSxVQUFVLEVBQUUsSUFBZDtBQUFvQkMsTUFBQUEsWUFBWSxFQUFFO0FBQWxDLEtBQWY7QUFDQSxRQUFNQyxhQUFhLEdBQUcsS0FBS0MsZ0JBQUwsRUFBdEI7O0FBRUEsUUFBSUQsYUFBYSxDQUFDRSxNQUFkLEtBQXlCLENBQTdCLEVBQWdDO0FBQzlCO0FBQ0EsYUFBT0wsTUFBUDtBQUNEOztBQUVELFFBQU1NLE9BQU8sR0FBR0gsYUFBYSxDQUFDLENBQUQsQ0FBN0I7QUFDQSxRQUFNSSxPQUFPLEdBQUdSLEtBQUssQ0FBQ1MsU0FBdEI7QUFFQSxRQUFNQyxJQUFJLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxDQUFTTCxPQUFPLENBQUMsQ0FBRCxDQUFoQixFQUFxQkMsT0FBTyxDQUFDLENBQUQsQ0FBNUIsQ0FBYjtBQUNBLFFBQU1LLElBQUksR0FBR0YsSUFBSSxDQUFDQyxHQUFMLENBQVNMLE9BQU8sQ0FBQyxDQUFELENBQWhCLEVBQXFCQyxPQUFPLENBQUMsQ0FBRCxDQUE1QixDQUFiO0FBQ0EsUUFBTU0sSUFBSSxHQUFHSCxJQUFJLENBQUNJLEdBQUwsQ0FBU1IsT0FBTyxDQUFDLENBQUQsQ0FBaEIsRUFBcUJDLE9BQU8sQ0FBQyxDQUFELENBQTVCLENBQWI7QUFDQSxRQUFNUSxJQUFJLEdBQUdMLElBQUksQ0FBQ0ksR0FBTCxDQUFTUixPQUFPLENBQUMsQ0FBRCxDQUFoQixFQUFxQkMsT0FBTyxDQUFDLENBQUQsQ0FBNUIsQ0FBYjtBQUVBLFFBQU1TLGFBQWEsR0FBRywwQkFBWSxDQUFDUCxJQUFELEVBQU9HLElBQVAsRUFBYUMsSUFBYixFQUFtQkUsSUFBbkIsQ0FBWixFQUFzQ0UsUUFBdEMsQ0FBK0NDLFdBQS9DLENBQTJELENBQTNELENBQXRCO0FBQ0EsUUFBTUMsaUJBQWlCLEdBQUcsOENBQXdCYixPQUF4QixFQUFpQ0MsT0FBakMsQ0FBMUI7QUFFQSxRQUFNYSxTQUFTLEdBQUdWLElBQUksQ0FBQ0ksR0FBTCxDQUFTLHVCQUFTLG9CQUFNRSxhQUFhLENBQUMsQ0FBRCxDQUFuQixDQUFULEVBQWtDLG9CQUFNQSxhQUFhLENBQUMsQ0FBRCxDQUFuQixDQUFsQyxDQUFULEVBQXFFLEtBQXJFLENBQWxCO0FBQ0EsUUFBTUssU0FBUyxHQUFHWCxJQUFJLENBQUNJLEdBQUwsQ0FBUyx1QkFBUyxvQkFBTUUsYUFBYSxDQUFDLENBQUQsQ0FBbkIsQ0FBVCxFQUFrQyxvQkFBTUEsYUFBYSxDQUFDLENBQUQsQ0FBbkIsQ0FBbEMsQ0FBVCxFQUFxRSxLQUFyRSxDQUFsQjs7QUFFQSxTQUFLTSxvQkFBTCxDQUEwQixzQkFBUUgsaUJBQVIsRUFBMkJDLFNBQTNCLEVBQXNDQyxTQUF0QyxDQUExQjs7QUFFQSxXQUFPckIsTUFBUDtBQUNEOztBQTdCbUUiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgYmJveFBvbHlnb24gZnJvbSAnQHR1cmYvYmJveC1wb2x5Z29uJztcbmltcG9ydCBkaXN0YW5jZSBmcm9tICdAdHVyZi9kaXN0YW5jZSc7XG5pbXBvcnQgZWxsaXBzZSBmcm9tICdAdHVyZi9lbGxpcHNlJztcbmltcG9ydCB7IHBvaW50IH0gZnJvbSAnQHR1cmYvaGVscGVycyc7XG5pbXBvcnQgdHlwZSB7IFBvaW50ZXJNb3ZlRXZlbnQgfSBmcm9tICcuLi90eXBlcy5qcyc7XG5pbXBvcnQgeyBnZXRJbnRlcm1lZGlhdGVQb3NpdGlvbiwgdHlwZSBHZW9Kc29uRWRpdEFjdGlvbiB9IGZyb20gJy4vZ2VvanNvbi1lZGl0LW1vZGUuanMnO1xuaW1wb3J0IHsgVHdvQ2xpY2tQb2x5Z29uTW9kZSB9IGZyb20gJy4vdHdvLWNsaWNrLXBvbHlnb24tbW9kZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBEcmF3RWxsaXBzZUJ5Qm91bmRpbmdCb3hNb2RlIGV4dGVuZHMgVHdvQ2xpY2tQb2x5Z29uTW9kZSB7XG4gIGhhbmRsZVBvaW50ZXJNb3ZlQWRhcHRlcihcbiAgICBldmVudDogUG9pbnRlck1vdmVFdmVudFxuICApOiB7IGVkaXRBY3Rpb246ID9HZW9Kc29uRWRpdEFjdGlvbiwgY2FuY2VsTWFwUGFuOiBib29sZWFuIH0ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHsgZWRpdEFjdGlvbjogbnVsbCwgY2FuY2VsTWFwUGFuOiBmYWxzZSB9O1xuICAgIGNvbnN0IGNsaWNrU2VxdWVuY2UgPSB0aGlzLmdldENsaWNrU2VxdWVuY2UoKTtcblxuICAgIGlmIChjbGlja1NlcXVlbmNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gbm90aGluZyB0byBkbyB5ZXRcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgY29uc3QgY29ybmVyMSA9IGNsaWNrU2VxdWVuY2VbMF07XG4gICAgY29uc3QgY29ybmVyMiA9IGV2ZW50Lm1hcENvb3JkcztcblxuICAgIGNvbnN0IG1pblggPSBNYXRoLm1pbihjb3JuZXIxWzBdLCBjb3JuZXIyWzBdKTtcbiAgICBjb25zdCBtaW5ZID0gTWF0aC5taW4oY29ybmVyMVsxXSwgY29ybmVyMlsxXSk7XG4gICAgY29uc3QgbWF4WCA9IE1hdGgubWF4KGNvcm5lcjFbMF0sIGNvcm5lcjJbMF0pO1xuICAgIGNvbnN0IG1heFkgPSBNYXRoLm1heChjb3JuZXIxWzFdLCBjb3JuZXIyWzFdKTtcblxuICAgIGNvbnN0IHBvbHlnb25Qb2ludHMgPSBiYm94UG9seWdvbihbbWluWCwgbWluWSwgbWF4WCwgbWF4WV0pLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdO1xuICAgIGNvbnN0IGNlbnRlckNvb3JkaW5hdGVzID0gZ2V0SW50ZXJtZWRpYXRlUG9zaXRpb24oY29ybmVyMSwgY29ybmVyMik7XG5cbiAgICBjb25zdCB4U2VtaUF4aXMgPSBNYXRoLm1heChkaXN0YW5jZShwb2ludChwb2x5Z29uUG9pbnRzWzBdKSwgcG9pbnQocG9seWdvblBvaW50c1sxXSkpLCAwLjAwMSk7XG4gICAgY29uc3QgeVNlbWlBeGlzID0gTWF0aC5tYXgoZGlzdGFuY2UocG9pbnQocG9seWdvblBvaW50c1swXSksIHBvaW50KHBvbHlnb25Qb2ludHNbM10pKSwgMC4wMDEpO1xuXG4gICAgdGhpcy5fc2V0VGVudGF0aXZlRmVhdHVyZShlbGxpcHNlKGNlbnRlckNvb3JkaW5hdGVzLCB4U2VtaUF4aXMsIHlTZW1pQXhpcykpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuIl19