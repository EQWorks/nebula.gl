"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DrawLineStringMode = void 0;

var _geojsonEditMode = require("./geojson-edit-mode.js");

var _immutableFeatureCollection = require("./immutable-feature-collection.js");

class DrawLineStringMode extends _geojsonEditMode.BaseGeoJsonEditMode {
  handleClickAdapter(event, props) {
    super.handleClickAdapter(event, props);
    var editAction = null;
    var selectedFeatureIndexes = props.selectedIndexes;
    var selectedGeometry = this.getSelectedGeometry(props);
    var tentativeFeature = this.getTentativeFeature();
    var clickSequence = this.getClickSequence();

    if (selectedFeatureIndexes.length > 1 || selectedGeometry && selectedGeometry.type !== 'LineString') {
      console.warn("drawLineString mode only supported for single LineString selection"); // eslint-disable-line

      this.resetClickSequence();
      return null;
    }

    if (selectedGeometry && selectedGeometry.type === 'LineString') {
      // Extend the LineString
      var lineString = selectedGeometry;
      var positionIndexes = [lineString.coordinates.length];
      var modeConfig = props.modeConfig;

      if (modeConfig && modeConfig.drawAtFront) {
        positionIndexes = [0];
      }

      var featureIndex = selectedFeatureIndexes[0];
      var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).addPosition(featureIndex, positionIndexes, event.mapCoords).getObject();
      editAction = {
        updatedData: updatedData,
        editType: 'addPosition',
        editContext: {
          featureIndexes: [featureIndex],
          positionIndexes: positionIndexes,
          position: event.mapCoords
        }
      };
      this.resetClickSequence();
    } else if (clickSequence.length === 2 && tentativeFeature) {
      // Add a new LineString
      var geometry = tentativeFeature.geometry;
      editAction = this.getAddFeatureAction(geometry, props.data);
      this.resetClickSequence();
    }

    return editAction;
  }

  handlePointerMoveAdapter(event, props) {
    var result = {
      editAction: null,
      cancelMapPan: false
    };
    var clickSequence = this.getClickSequence();
    var mapCoords = event.mapCoords;
    var startPosition = null;
    var selectedFeatureIndexes = props.selectedIndexes;
    var selectedGeometry = this.getSelectedGeometry(props);

    if (selectedFeatureIndexes.length > 1 || selectedGeometry && selectedGeometry.type !== 'LineString') {
      // unsupported
      return result;
    }

    if (selectedGeometry && selectedGeometry.type === 'LineString') {
      // Draw an extension line starting from one end of the selected LineString
      startPosition = selectedGeometry.coordinates[selectedGeometry.coordinates.length - 1];
      var modeConfig = props.modeConfig;

      if (modeConfig && modeConfig.drawAtFront) {
        startPosition = selectedGeometry.coordinates[0];
      }
    } else if (clickSequence.length === 1) {
      startPosition = clickSequence[0];
    }

    if (startPosition) {
      this._setTentativeFeature({
        type: 'Feature',
        properties: {},
        geometry: {
          type: 'LineString',
          coordinates: [startPosition, mapCoords]
        }
      });
    }

    return result;
  }

  getCursorAdapter() {
    return 'cell';
  }

}

exports.DrawLineStringMode = DrawLineStringMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,