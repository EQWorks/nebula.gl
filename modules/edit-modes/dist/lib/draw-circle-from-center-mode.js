"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DrawCircleFromCenterMode = void 0;

var _circle = _interopRequireDefault(require("@turf/circle"));

var _distance = _interopRequireDefault(require("@turf/distance"));

var _twoClickPolygonMode = require("./two-click-polygon-mode.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class DrawCircleFromCenterMode extends _twoClickPolygonMode.TwoClickPolygonMode {
  handlePointerMoveAdapter(event, props) {
    var result = {
      editAction: null,
      cancelMapPan: false
    };
    var clickSequence = this.getClickSequence();

    if (clickSequence.length === 0) {
      // nothing to do yet
      return result;
    }

    var modeConfig = props.modeConfig || {}; // Default turf value for circle is 64

    var _modeConfig$steps = modeConfig.steps,
        steps = _modeConfig$steps === void 0 ? 64 : _modeConfig$steps;
    var options = {
      steps: steps
    };

    if (steps < 4) {
      console.warn("Minimum steps to draw a circle is 4 "); // eslint-disable-line no-console,no-undef

      options.steps = 4;
    }

    var centerCoordinates = clickSequence[0];
    var radius = Math.max((0, _distance.default)(centerCoordinates, event.mapCoords), 0.001);

    this._setTentativeFeature((0, _circle.default)(centerCoordinates, radius, options));

    return result;
  }

}

exports.DrawCircleFromCenterMode = DrawCircleFromCenterMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZHJhdy1jaXJjbGUtZnJvbS1jZW50ZXItbW9kZS5qcyJdLCJuYW1lcyI6WyJEcmF3Q2lyY2xlRnJvbUNlbnRlck1vZGUiLCJUd29DbGlja1BvbHlnb25Nb2RlIiwiaGFuZGxlUG9pbnRlck1vdmVBZGFwdGVyIiwiZXZlbnQiLCJwcm9wcyIsInJlc3VsdCIsImVkaXRBY3Rpb24iLCJjYW5jZWxNYXBQYW4iLCJjbGlja1NlcXVlbmNlIiwiZ2V0Q2xpY2tTZXF1ZW5jZSIsImxlbmd0aCIsIm1vZGVDb25maWciLCJzdGVwcyIsIm9wdGlvbnMiLCJjb25zb2xlIiwid2FybiIsImNlbnRlckNvb3JkaW5hdGVzIiwicmFkaXVzIiwiTWF0aCIsIm1heCIsIm1hcENvb3JkcyIsIl9zZXRUZW50YXRpdmVGZWF0dXJlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7O0FBQ0E7O0FBSUE7Ozs7QUFFTyxNQUFNQSx3QkFBTixTQUF1Q0Msd0NBQXZDLENBQTJEO0FBQ2hFQyxFQUFBQSx3QkFBd0IsQ0FDdEJDLEtBRHNCLEVBRXRCQyxLQUZzQixFQUdxQztBQUMzRCxRQUFNQyxNQUFNLEdBQUc7QUFBRUMsTUFBQUEsVUFBVSxFQUFFLElBQWQ7QUFBb0JDLE1BQUFBLFlBQVksRUFBRTtBQUFsQyxLQUFmO0FBQ0EsUUFBTUMsYUFBYSxHQUFHLEtBQUtDLGdCQUFMLEVBQXRCOztBQUVBLFFBQUlELGFBQWEsQ0FBQ0UsTUFBZCxLQUF5QixDQUE3QixFQUFnQztBQUM5QjtBQUNBLGFBQU9MLE1BQVA7QUFDRDs7QUFFRCxRQUFNTSxVQUFVLEdBQUdQLEtBQUssQ0FBQ08sVUFBTixJQUFvQixFQUF2QyxDQVQyRCxDQVUzRDs7QUFWMkQsNEJBV3BDQSxVQVhvQyxDQVduREMsS0FYbUQ7QUFBQSxRQVduREEsS0FYbUQsa0NBVzNDLEVBWDJDO0FBWTNELFFBQU1DLE9BQU8sR0FBRztBQUFFRCxNQUFBQSxLQUFLLEVBQUxBO0FBQUYsS0FBaEI7O0FBRUEsUUFBSUEsS0FBSyxHQUFHLENBQVosRUFBZTtBQUNiRSxNQUFBQSxPQUFPLENBQUNDLElBQVIseUNBRGEsQ0FDeUM7O0FBQ3RERixNQUFBQSxPQUFPLENBQUNELEtBQVIsR0FBZ0IsQ0FBaEI7QUFDRDs7QUFFRCxRQUFNSSxpQkFBaUIsR0FBR1IsYUFBYSxDQUFDLENBQUQsQ0FBdkM7QUFDQSxRQUFNUyxNQUFNLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxDQUFTLHVCQUFTSCxpQkFBVCxFQUE0QmIsS0FBSyxDQUFDaUIsU0FBbEMsQ0FBVCxFQUF1RCxLQUF2RCxDQUFmOztBQUNBLFNBQUtDLG9CQUFMLENBQTBCLHFCQUFPTCxpQkFBUCxFQUEwQkMsTUFBMUIsRUFBa0NKLE9BQWxDLENBQTFCOztBQUVBLFdBQU9SLE1BQVA7QUFDRDs7QUE1QitEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IGNpcmNsZSBmcm9tICdAdHVyZi9jaXJjbGUnO1xuaW1wb3J0IGRpc3RhbmNlIGZyb20gJ0B0dXJmL2Rpc3RhbmNlJztcbmltcG9ydCB0eXBlIHsgUG9pbnRlck1vdmVFdmVudCwgTW9kZVByb3BzIH0gZnJvbSAnLi4vdHlwZXMuanMnO1xuaW1wb3J0IHsgdHlwZSBGZWF0dXJlQ29sbGVjdGlvbiB9IGZyb20gJy4uL2dlb2pzb24tdHlwZXMuanMnO1xuaW1wb3J0IHsgdHlwZSBHZW9Kc29uRWRpdEFjdGlvbiB9IGZyb20gJy4vZ2VvanNvbi1lZGl0LW1vZGUuanMnO1xuaW1wb3J0IHsgVHdvQ2xpY2tQb2x5Z29uTW9kZSB9IGZyb20gJy4vdHdvLWNsaWNrLXBvbHlnb24tbW9kZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBEcmF3Q2lyY2xlRnJvbUNlbnRlck1vZGUgZXh0ZW5kcyBUd29DbGlja1BvbHlnb25Nb2RlIHtcbiAgaGFuZGxlUG9pbnRlck1vdmVBZGFwdGVyKFxuICAgIGV2ZW50OiBQb2ludGVyTW92ZUV2ZW50LFxuICAgIHByb3BzOiBNb2RlUHJvcHM8RmVhdHVyZUNvbGxlY3Rpb24+XG4gICk6IHsgZWRpdEFjdGlvbjogP0dlb0pzb25FZGl0QWN0aW9uLCBjYW5jZWxNYXBQYW46IGJvb2xlYW4gfSB7XG4gICAgY29uc3QgcmVzdWx0ID0geyBlZGl0QWN0aW9uOiBudWxsLCBjYW5jZWxNYXBQYW46IGZhbHNlIH07XG4gICAgY29uc3QgY2xpY2tTZXF1ZW5jZSA9IHRoaXMuZ2V0Q2xpY2tTZXF1ZW5jZSgpO1xuXG4gICAgaWYgKGNsaWNrU2VxdWVuY2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBub3RoaW5nIHRvIGRvIHlldFxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBjb25zdCBtb2RlQ29uZmlnID0gcHJvcHMubW9kZUNvbmZpZyB8fCB7fTtcbiAgICAvLyBEZWZhdWx0IHR1cmYgdmFsdWUgZm9yIGNpcmNsZSBpcyA2NFxuICAgIGNvbnN0IHsgc3RlcHMgPSA2NCB9ID0gbW9kZUNvbmZpZztcbiAgICBjb25zdCBvcHRpb25zID0geyBzdGVwcyB9O1xuXG4gICAgaWYgKHN0ZXBzIDwgNCkge1xuICAgICAgY29uc29sZS53YXJuKGBNaW5pbXVtIHN0ZXBzIHRvIGRyYXcgYSBjaXJjbGUgaXMgNCBgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlLG5vLXVuZGVmXG4gICAgICBvcHRpb25zLnN0ZXBzID0gNDtcbiAgICB9XG5cbiAgICBjb25zdCBjZW50ZXJDb29yZGluYXRlcyA9IGNsaWNrU2VxdWVuY2VbMF07XG4gICAgY29uc3QgcmFkaXVzID0gTWF0aC5tYXgoZGlzdGFuY2UoY2VudGVyQ29vcmRpbmF0ZXMsIGV2ZW50Lm1hcENvb3JkcyksIDAuMDAxKTtcbiAgICB0aGlzLl9zZXRUZW50YXRpdmVGZWF0dXJlKGNpcmNsZShjZW50ZXJDb29yZGluYXRlcywgcmFkaXVzLCBvcHRpb25zKSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4iXX0=