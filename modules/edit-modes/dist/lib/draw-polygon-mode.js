"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DrawPolygonMode = void 0;

var _geojsonEditMode = require("./geojson-edit-mode.js");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

class DrawPolygonMode extends _geojsonEditMode.BaseGeoJsonEditMode {
  getEditHandlesAdapter(picks, mapCoords, props) {
    var handles = super.getEditHandlesAdapter(picks, mapCoords, props);
    var tentativeFeature = this.getTentativeFeature();

    if (tentativeFeature) {
      handles = handles.concat((0, _geojsonEditMode.getEditHandlesForGeometry)(tentativeFeature.geometry, -1)); // Slice off the handles that are are next to the pointer

      if (tentativeFeature && tentativeFeature.geometry.type === 'LineString') {
        // Remove the last existing handle
        handles = handles.slice(0, -1);
      } else if (tentativeFeature && tentativeFeature.geometry.type === 'Polygon') {
        // Remove the last existing handle
        handles = handles.slice(0, -1);
      }
    }

    return handles;
  }

  handleClickAdapter(event, props) {
    super.handleClickAdapter(event, props);
    var picks = event.picks;
    var tentativeFeature = this.getTentativeFeature();
    var editAction = null;
    var clickedEditHandle = (0, _geojsonEditMode.getPickedEditHandle)(picks);

    if (clickedEditHandle) {
      // User clicked an edit handle.
      // Remove it from the click sequence, so it isn't added as a new point.
      var clickSequence = this.getClickSequence();
      clickSequence.splice(clickSequence.length - 1, 1);
    }

    if (tentativeFeature && tentativeFeature.geometry.type === 'Polygon') {
      var polygon = tentativeFeature.geometry;

      if (clickedEditHandle && clickedEditHandle.featureIndex === -1 && (clickedEditHandle.positionIndexes[1] === 0 || clickedEditHandle.positionIndexes[1] === polygon.coordinates[0].length - 3)) {
        // They clicked the first or last point (or double-clicked), so complete the polygon
        // Remove the hovered position
        var polygonToAdd = {
          type: 'Polygon',
          coordinates: [_toConsumableArray(polygon.coordinates[0].slice(0, -2)).concat([polygon.coordinates[0][0]])]
        };
        this.resetClickSequence();

        this._setTentativeFeature(null);

        editAction = this.getAddFeatureOrBooleanPolygonAction(polygonToAdd, props);
      }
    } // Trigger pointer move right away in order for it to update edit handles (to support double-click)


    var fakePointerMoveEvent = {
      screenCoords: [-1, -1],
      mapCoords: event.mapCoords,
      picks: [],
      isDragging: false,
      pointerDownPicks: null,
      pointerDownScreenCoords: null,
      pointerDownMapCoords: null,
      sourceEvent: null
    };
    this.handlePointerMoveAdapter(fakePointerMoveEvent, props);
    return editAction;
  }

  handlePointerMoveAdapter(_ref, props) {
    var mapCoords = _ref.mapCoords;
    var clickSequence = this.getClickSequence();
    var result = {
      editAction: null,
      cancelMapPan: false
    };

    if (clickSequence.length === 0) {
      // nothing to do yet
      return result;
    }

    if (clickSequence.length < 3) {
      // Draw a LineString connecting all the clicked points with the hovered point
      this._setTentativeFeature({
        type: 'Feature',
        geometry: {
          type: 'LineString',
          coordinates: _toConsumableArray(clickSequence).concat([mapCoords])
        }
      });
    } else {
      // Draw a Polygon connecting all the clicked points with the hovered point
      this._setTentativeFeature({
        type: 'Feature',
        geometry: {
          type: 'Polygon',
          coordinates: [_toConsumableArray(clickSequence).concat([mapCoords, clickSequence[0]])]
        }
      });
    }

    return result;
  }

  getCursorAdapter() {
    return 'cell';
  }

}

exports.DrawPolygonMode = DrawPolygonMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,