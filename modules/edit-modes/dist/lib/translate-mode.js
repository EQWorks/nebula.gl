"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TranslateMode = void 0;

var _bearing = _interopRequireDefault(require("@turf/bearing"));

var _distance = _interopRequireDefault(require("@turf/distance"));

var _transformTranslate = _interopRequireDefault(require("@turf/transform-translate"));

var _helpers = require("@turf/helpers");

var _geojsonEditMode = require("./geojson-edit-mode.js");

var _immutableFeatureCollection = require("./immutable-feature-collection.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class TranslateMode extends _geojsonEditMode.BaseGeoJsonEditMode {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_geometryBeforeTranslate", void 0);

    _defineProperty(this, "_isTranslatable", void 0);
  }

  handlePointerMoveAdapter(event, props) {
    var editAction = null;
    this._isTranslatable = Boolean(this._geometryBeforeTranslate) || this.isSelectionPicked(event.picks, props);

    if (!this._isTranslatable || !event.pointerDownMapCoords) {
      // Nothing to do
      return {
        editAction: null,
        cancelMapPan: false
      };
    }

    if (event.isDragging && this._geometryBeforeTranslate) {
      // Translate the geometry
      editAction = this.getTranslateAction(event.pointerDownMapCoords, event.mapCoords, 'translating', props);
    }

    return {
      editAction: editAction,
      cancelMapPan: true
    };
  }

  handleStartDraggingAdapter(event, props) {
    if (!this._isTranslatable) {
      return null;
    }

    this._geometryBeforeTranslate = this.getSelectedFeaturesAsFeatureCollection(props);
    return null;
  }

  handleStopDraggingAdapter(event, props) {
    var editAction = null;

    if (this._geometryBeforeTranslate) {
      // Translate the geometry
      editAction = this.getTranslateAction(event.pointerDownMapCoords, event.mapCoords, 'translated', props);
      this._geometryBeforeTranslate = null;
    }

    return editAction;
  }

  getCursorAdapter() {
    if (this._isTranslatable) {
      return 'move';
    }

    return null;
  }

  getTranslateAction(startDragPoint, currentPoint, editType, props) {
    if (!this._geometryBeforeTranslate) {
      return null;
    }

    var p1 = (0, _helpers.point)(startDragPoint);
    var p2 = (0, _helpers.point)(currentPoint);
    var distanceMoved = (0, _distance.default)(p1, p2);
    var direction = (0, _bearing.default)(p1, p2);
    var movedFeatures = (0, _transformTranslate.default)(this._geometryBeforeTranslate, distanceMoved, direction);
    var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data);
    var selectedIndexes = props.selectedIndexes;

    for (var i = 0; i < selectedIndexes.length; i++) {
      var selectedIndex = selectedIndexes[i];
      var movedFeature = movedFeatures.features[i];
      updatedData = updatedData.replaceGeometry(selectedIndex, movedFeature.geometry);
    }

    return {
      updatedData: updatedData.getObject(),
      editType: editType,
      editContext: {
        featureIndexes: selectedIndexes
      }
    };
  }

}

exports.TranslateMode = TranslateMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,