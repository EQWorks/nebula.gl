"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DrawEllipseByBoundingBoxHandler = void 0;

var _bboxPolygon = _interopRequireDefault(require("@turf/bbox-polygon"));

var _distance = _interopRequireDefault(require("@turf/distance"));

var _ellipse = _interopRequireDefault(require("@turf/ellipse"));

var _helpers = require("@turf/helpers");

var _twoClickPolygonHandler = require("./two-click-polygon-handler.js");

var _modeHandler = require("./mode-handler.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO edit-modes: delete handlers once EditMode fully implemented
class DrawEllipseByBoundingBoxHandler extends _twoClickPolygonHandler.TwoClickPolygonHandler {
  handlePointerMove(event) {
    var result = {
      editAction: null,
      cancelMapPan: false
    };
    var clickSequence = this.getClickSequence();

    if (clickSequence.length === 0) {
      // nothing to do yet
      return result;
    }

    var corner1 = clickSequence[0];
    var corner2 = event.groundCoords;
    var minX = Math.min(corner1[0], corner2[0]);
    var minY = Math.min(corner1[1], corner2[1]);
    var maxX = Math.max(corner1[0], corner2[0]);
    var maxY = Math.max(corner1[1], corner2[1]);
    var polygonPoints = (0, _bboxPolygon.default)([minX, minY, maxX, maxY]).geometry.coordinates[0];
    var centerCoordinates = (0, _modeHandler.getIntermediatePosition)(corner1, corner2);
    var xSemiAxis = Math.max((0, _distance.default)((0, _helpers.point)(polygonPoints[0]), (0, _helpers.point)(polygonPoints[1])), 0.001);
    var ySemiAxis = Math.max((0, _distance.default)((0, _helpers.point)(polygonPoints[0]), (0, _helpers.point)(polygonPoints[3])), 0.001);

    this._setTentativeFeature((0, _ellipse.default)(centerCoordinates, xSemiAxis, ySemiAxis));

    return result;
  }

}

exports.DrawEllipseByBoundingBoxHandler = DrawEllipseByBoundingBoxHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlLWhhbmRsZXJzL2RyYXctZWxsaXBzZS1ieS1ib3VuZGluZy1ib3gtaGFuZGxlci5qcyJdLCJuYW1lcyI6WyJEcmF3RWxsaXBzZUJ5Qm91bmRpbmdCb3hIYW5kbGVyIiwiVHdvQ2xpY2tQb2x5Z29uSGFuZGxlciIsImhhbmRsZVBvaW50ZXJNb3ZlIiwiZXZlbnQiLCJyZXN1bHQiLCJlZGl0QWN0aW9uIiwiY2FuY2VsTWFwUGFuIiwiY2xpY2tTZXF1ZW5jZSIsImdldENsaWNrU2VxdWVuY2UiLCJsZW5ndGgiLCJjb3JuZXIxIiwiY29ybmVyMiIsImdyb3VuZENvb3JkcyIsIm1pblgiLCJNYXRoIiwibWluIiwibWluWSIsIm1heFgiLCJtYXgiLCJtYXhZIiwicG9seWdvblBvaW50cyIsImdlb21ldHJ5IiwiY29vcmRpbmF0ZXMiLCJjZW50ZXJDb29yZGluYXRlcyIsInhTZW1pQXhpcyIsInlTZW1pQXhpcyIsIl9zZXRUZW50YXRpdmVGZWF0dXJlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0E7O0FBQ0E7Ozs7QUFFQTtBQUNPLE1BQU1BLCtCQUFOLFNBQThDQyw4Q0FBOUMsQ0FBcUU7QUFDMUVDLEVBQUFBLGlCQUFpQixDQUFDQyxLQUFELEVBQThFO0FBQzdGLFFBQU1DLE1BQU0sR0FBRztBQUFFQyxNQUFBQSxVQUFVLEVBQUUsSUFBZDtBQUFvQkMsTUFBQUEsWUFBWSxFQUFFO0FBQWxDLEtBQWY7QUFDQSxRQUFNQyxhQUFhLEdBQUcsS0FBS0MsZ0JBQUwsRUFBdEI7O0FBRUEsUUFBSUQsYUFBYSxDQUFDRSxNQUFkLEtBQXlCLENBQTdCLEVBQWdDO0FBQzlCO0FBQ0EsYUFBT0wsTUFBUDtBQUNEOztBQUVELFFBQU1NLE9BQU8sR0FBR0gsYUFBYSxDQUFDLENBQUQsQ0FBN0I7QUFDQSxRQUFNSSxPQUFPLEdBQUdSLEtBQUssQ0FBQ1MsWUFBdEI7QUFFQSxRQUFNQyxJQUFJLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxDQUFTTCxPQUFPLENBQUMsQ0FBRCxDQUFoQixFQUFxQkMsT0FBTyxDQUFDLENBQUQsQ0FBNUIsQ0FBYjtBQUNBLFFBQU1LLElBQUksR0FBR0YsSUFBSSxDQUFDQyxHQUFMLENBQVNMLE9BQU8sQ0FBQyxDQUFELENBQWhCLEVBQXFCQyxPQUFPLENBQUMsQ0FBRCxDQUE1QixDQUFiO0FBQ0EsUUFBTU0sSUFBSSxHQUFHSCxJQUFJLENBQUNJLEdBQUwsQ0FBU1IsT0FBTyxDQUFDLENBQUQsQ0FBaEIsRUFBcUJDLE9BQU8sQ0FBQyxDQUFELENBQTVCLENBQWI7QUFDQSxRQUFNUSxJQUFJLEdBQUdMLElBQUksQ0FBQ0ksR0FBTCxDQUFTUixPQUFPLENBQUMsQ0FBRCxDQUFoQixFQUFxQkMsT0FBTyxDQUFDLENBQUQsQ0FBNUIsQ0FBYjtBQUVBLFFBQU1TLGFBQWEsR0FBRywwQkFBWSxDQUFDUCxJQUFELEVBQU9HLElBQVAsRUFBYUMsSUFBYixFQUFtQkUsSUFBbkIsQ0FBWixFQUFzQ0UsUUFBdEMsQ0FBK0NDLFdBQS9DLENBQTJELENBQTNELENBQXRCO0FBQ0EsUUFBTUMsaUJBQWlCLEdBQUcsMENBQXdCYixPQUF4QixFQUFpQ0MsT0FBakMsQ0FBMUI7QUFFQSxRQUFNYSxTQUFTLEdBQUdWLElBQUksQ0FBQ0ksR0FBTCxDQUFTLHVCQUFTLG9CQUFNRSxhQUFhLENBQUMsQ0FBRCxDQUFuQixDQUFULEVBQWtDLG9CQUFNQSxhQUFhLENBQUMsQ0FBRCxDQUFuQixDQUFsQyxDQUFULEVBQXFFLEtBQXJFLENBQWxCO0FBQ0EsUUFBTUssU0FBUyxHQUFHWCxJQUFJLENBQUNJLEdBQUwsQ0FBUyx1QkFBUyxvQkFBTUUsYUFBYSxDQUFDLENBQUQsQ0FBbkIsQ0FBVCxFQUFrQyxvQkFBTUEsYUFBYSxDQUFDLENBQUQsQ0FBbkIsQ0FBbEMsQ0FBVCxFQUFxRSxLQUFyRSxDQUFsQjs7QUFFQSxTQUFLTSxvQkFBTCxDQUEwQixzQkFBUUgsaUJBQVIsRUFBMkJDLFNBQTNCLEVBQXNDQyxTQUF0QyxDQUExQjs7QUFFQSxXQUFPckIsTUFBUDtBQUNEOztBQTNCeUUiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgYmJveFBvbHlnb24gZnJvbSAnQHR1cmYvYmJveC1wb2x5Z29uJztcbmltcG9ydCBkaXN0YW5jZSBmcm9tICdAdHVyZi9kaXN0YW5jZSc7XG5pbXBvcnQgZWxsaXBzZSBmcm9tICdAdHVyZi9lbGxpcHNlJztcbmltcG9ydCB7IHBvaW50IH0gZnJvbSAnQHR1cmYvaGVscGVycyc7XG5pbXBvcnQgdHlwZSB7IFBvaW50ZXJNb3ZlRXZlbnQgfSBmcm9tICcuLi9ldmVudC10eXBlcy5qcyc7XG5pbXBvcnQgdHlwZSB7IEVkaXRBY3Rpb24gfSBmcm9tICcuL21vZGUtaGFuZGxlci5qcyc7XG5pbXBvcnQgeyBUd29DbGlja1BvbHlnb25IYW5kbGVyIH0gZnJvbSAnLi90d28tY2xpY2stcG9seWdvbi1oYW5kbGVyLmpzJztcbmltcG9ydCB7IGdldEludGVybWVkaWF0ZVBvc2l0aW9uIH0gZnJvbSAnLi9tb2RlLWhhbmRsZXIuanMnO1xuXG4vLyBUT0RPIGVkaXQtbW9kZXM6IGRlbGV0ZSBoYW5kbGVycyBvbmNlIEVkaXRNb2RlIGZ1bGx5IGltcGxlbWVudGVkXG5leHBvcnQgY2xhc3MgRHJhd0VsbGlwc2VCeUJvdW5kaW5nQm94SGFuZGxlciBleHRlbmRzIFR3b0NsaWNrUG9seWdvbkhhbmRsZXIge1xuICBoYW5kbGVQb2ludGVyTW92ZShldmVudDogUG9pbnRlck1vdmVFdmVudCk6IHsgZWRpdEFjdGlvbjogP0VkaXRBY3Rpb24sIGNhbmNlbE1hcFBhbjogYm9vbGVhbiB9IHtcbiAgICBjb25zdCByZXN1bHQgPSB7IGVkaXRBY3Rpb246IG51bGwsIGNhbmNlbE1hcFBhbjogZmFsc2UgfTtcbiAgICBjb25zdCBjbGlja1NlcXVlbmNlID0gdGhpcy5nZXRDbGlja1NlcXVlbmNlKCk7XG5cbiAgICBpZiAoY2xpY2tTZXF1ZW5jZS5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIG5vdGhpbmcgdG8gZG8geWV0XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGNvbnN0IGNvcm5lcjEgPSBjbGlja1NlcXVlbmNlWzBdO1xuICAgIGNvbnN0IGNvcm5lcjIgPSBldmVudC5ncm91bmRDb29yZHM7XG5cbiAgICBjb25zdCBtaW5YID0gTWF0aC5taW4oY29ybmVyMVswXSwgY29ybmVyMlswXSk7XG4gICAgY29uc3QgbWluWSA9IE1hdGgubWluKGNvcm5lcjFbMV0sIGNvcm5lcjJbMV0pO1xuICAgIGNvbnN0IG1heFggPSBNYXRoLm1heChjb3JuZXIxWzBdLCBjb3JuZXIyWzBdKTtcbiAgICBjb25zdCBtYXhZID0gTWF0aC5tYXgoY29ybmVyMVsxXSwgY29ybmVyMlsxXSk7XG5cbiAgICBjb25zdCBwb2x5Z29uUG9pbnRzID0gYmJveFBvbHlnb24oW21pblgsIG1pblksIG1heFgsIG1heFldKS5nZW9tZXRyeS5jb29yZGluYXRlc1swXTtcbiAgICBjb25zdCBjZW50ZXJDb29yZGluYXRlcyA9IGdldEludGVybWVkaWF0ZVBvc2l0aW9uKGNvcm5lcjEsIGNvcm5lcjIpO1xuXG4gICAgY29uc3QgeFNlbWlBeGlzID0gTWF0aC5tYXgoZGlzdGFuY2UocG9pbnQocG9seWdvblBvaW50c1swXSksIHBvaW50KHBvbHlnb25Qb2ludHNbMV0pKSwgMC4wMDEpO1xuICAgIGNvbnN0IHlTZW1pQXhpcyA9IE1hdGgubWF4KGRpc3RhbmNlKHBvaW50KHBvbHlnb25Qb2ludHNbMF0pLCBwb2ludChwb2x5Z29uUG9pbnRzWzNdKSksIDAuMDAxKTtcblxuICAgIHRoaXMuX3NldFRlbnRhdGl2ZUZlYXR1cmUoZWxsaXBzZShjZW50ZXJDb29yZGluYXRlcywgeFNlbWlBeGlzLCB5U2VtaUF4aXMpKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiJdfQ==