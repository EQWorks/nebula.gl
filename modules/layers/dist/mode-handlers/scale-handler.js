"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScaleHandler = void 0;

var _centroid = _interopRequireDefault(require("@turf/centroid"));

var _distance = _interopRequireDefault(require("@turf/distance"));

var _transformScale = _interopRequireDefault(require("@turf/transform-scale"));

var _modeHandler = require("./mode-handler.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// TODO edit-modes: delete handlers once EditMode fully implemented
class ScaleHandler extends _modeHandler.ModeHandler {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_isScalable", void 0);

    _defineProperty(this, "_geometryBeingScaled", void 0);
  }

  handlePointerMove(event) {
    var editAction = null;
    this._isScalable = Boolean(this._geometryBeingScaled) || this.isSelectionPicked(event.picks);

    if (!this._isScalable || !event.pointerDownGroundCoords) {
      // Nothing to do
      return {
        editAction: null,
        cancelMapPan: false
      };
    }

    if (event.isDragging && this._geometryBeingScaled) {
      // Scale the geometry
      editAction = this.getScaleAction(event.pointerDownGroundCoords, event.groundCoords, 'scaling');
    }

    return {
      editAction: editAction,
      cancelMapPan: true
    };
  }

  handleStartDragging(event) {
    if (!this._isScalable) {
      return null;
    }

    this._geometryBeingScaled = this.getSelectedFeaturesAsFeatureCollection();
    return null;
  }

  handleStopDragging(event) {
    var editAction = null;

    if (this._geometryBeingScaled) {
      // Scale the geometry
      editAction = this.getScaleAction(event.pointerDownGroundCoords, event.groundCoords, 'scaled');
      this._geometryBeingScaled = null;
    }

    return editAction;
  }

  getCursor(_ref) {
    var isDragging = _ref.isDragging;

    if (this._isScalable) {
      // TODO: look at doing SVG cursors to get a better "scale" cursor
      return 'move';
    }

    return isDragging ? 'grabbing' : 'grab';
  }

  getScaleAction(startDragPoint, currentPoint, editType) {
    var startPosition = startDragPoint;
    var centroid = (0, _centroid.default)(this._geometryBeingScaled);
    var factor = getScaleFactor(centroid, startPosition, currentPoint);
    var scaledFeatures = (0, _transformScale.default)(this._geometryBeingScaled, factor, {
      origin: centroid
    });
    var updatedData = this.getImmutableFeatureCollection();
    var selectedIndexes = this.getSelectedFeatureIndexes();

    for (var i = 0; i < selectedIndexes.length; i++) {
      var selectedIndex = selectedIndexes[i];
      var movedFeature = scaledFeatures.features[i];
      updatedData = updatedData.replaceGeometry(selectedIndex, movedFeature.geometry);
    }

    return {
      updatedData: updatedData.getObject(),
      editType: editType,
      featureIndexes: selectedIndexes,
      editContext: null
    };
  }

}

exports.ScaleHandler = ScaleHandler;

function getScaleFactor(centroid, startDragPoint, currentPoint) {
  var startDistance = (0, _distance.default)(centroid, startDragPoint);
  var endDistance = (0, _distance.default)(centroid, currentPoint);
  return endDistance / startDistance;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,