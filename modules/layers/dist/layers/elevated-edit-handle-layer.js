"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _keplerOutdatedDeck = require("kepler-outdated-deck.gl-core");

var _keplerOutdatedDeck2 = require("kepler-outdated-deck.gl-layers");

/* eslint-env browser */
var defaultProps = {};

class ElevatedEditHandleLayer extends _keplerOutdatedDeck.CompositeLayer {
  renderLayers() {
    var handles = new _keplerOutdatedDeck2.ScatterplotLayer(Object.assign({}, this.props, {
      id: "".concat(this.props.id, "-ScatterplotLayer"),
      data: this.props.data
    }));
    var lines = new _keplerOutdatedDeck2.LineLayer(Object.assign({}, this.props, {
      id: "".concat(this.props.id, "-LineLayer"),
      data: this.props.data,
      pickable: false,
      getSourcePosition: function getSourcePosition(_ref) {
        var position = _ref.position;
        return [position[0], position[1], 0];
      },
      getTargetPosition: function getTargetPosition(_ref2) {
        var position = _ref2.position;
        return [position[0], position[1], position[2] || 0];
      },
      getColor: [150, 150, 150, 200],
      getStrokeWidth: 3
    }));
    return [handles, lines];
  }

}

exports.default = ElevatedEditHandleLayer;
ElevatedEditHandleLayer.layerName = 'ElevatedEditHandleLayer';
ElevatedEditHandleLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYXllcnMvZWxldmF0ZWQtZWRpdC1oYW5kbGUtbGF5ZXIuanMiXSwibmFtZXMiOlsiZGVmYXVsdFByb3BzIiwiRWxldmF0ZWRFZGl0SGFuZGxlTGF5ZXIiLCJDb21wb3NpdGVMYXllciIsInJlbmRlckxheWVycyIsImhhbmRsZXMiLCJTY2F0dGVycGxvdExheWVyIiwiT2JqZWN0IiwiYXNzaWduIiwicHJvcHMiLCJpZCIsImRhdGEiLCJsaW5lcyIsIkxpbmVMYXllciIsInBpY2thYmxlIiwiZ2V0U291cmNlUG9zaXRpb24iLCJwb3NpdGlvbiIsImdldFRhcmdldFBvc2l0aW9uIiwiZ2V0Q29sb3IiLCJnZXRTdHJva2VXaWR0aCIsImxheWVyTmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUdBOztBQUNBOztBQUhBO0FBS0EsSUFBTUEsWUFBWSxHQUFHLEVBQXJCOztBQUVlLE1BQU1DLHVCQUFOLFNBQXNDQyxrQ0FBdEMsQ0FBcUQ7QUFDbEVDLEVBQUFBLFlBQVksR0FBRztBQUNiLFFBQU1DLE9BQU8sR0FBRyxJQUFJQyxxQ0FBSixDQUNkQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCLEtBQUtDLEtBQXZCLEVBQThCO0FBQzVCQyxNQUFBQSxFQUFFLFlBQUssS0FBS0QsS0FBTCxDQUFXQyxFQUFoQixzQkFEMEI7QUFFNUJDLE1BQUFBLElBQUksRUFBRSxLQUFLRixLQUFMLENBQVdFO0FBRlcsS0FBOUIsQ0FEYyxDQUFoQjtBQU9BLFFBQU1DLEtBQUssR0FBRyxJQUFJQyw4QkFBSixDQUNaTixNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCLEtBQUtDLEtBQXZCLEVBQThCO0FBQzVCQyxNQUFBQSxFQUFFLFlBQUssS0FBS0QsS0FBTCxDQUFXQyxFQUFoQixlQUQwQjtBQUU1QkMsTUFBQUEsSUFBSSxFQUFFLEtBQUtGLEtBQUwsQ0FBV0UsSUFGVztBQUc1QkcsTUFBQUEsUUFBUSxFQUFFLEtBSGtCO0FBSTVCQyxNQUFBQSxpQkFBaUIsRUFBRTtBQUFBLFlBQUdDLFFBQUgsUUFBR0EsUUFBSDtBQUFBLGVBQWtCLENBQUNBLFFBQVEsQ0FBQyxDQUFELENBQVQsRUFBY0EsUUFBUSxDQUFDLENBQUQsQ0FBdEIsRUFBMkIsQ0FBM0IsQ0FBbEI7QUFBQSxPQUpTO0FBSzVCQyxNQUFBQSxpQkFBaUIsRUFBRTtBQUFBLFlBQUdELFFBQUgsU0FBR0EsUUFBSDtBQUFBLGVBQWtCLENBQUNBLFFBQVEsQ0FBQyxDQUFELENBQVQsRUFBY0EsUUFBUSxDQUFDLENBQUQsQ0FBdEIsRUFBMkJBLFFBQVEsQ0FBQyxDQUFELENBQVIsSUFBZSxDQUExQyxDQUFsQjtBQUFBLE9BTFM7QUFNNUJFLE1BQUFBLFFBQVEsRUFBRSxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxFQUFnQixHQUFoQixDQU5rQjtBQU81QkMsTUFBQUEsY0FBYyxFQUFFO0FBUFksS0FBOUIsQ0FEWSxDQUFkO0FBWUEsV0FBTyxDQUFDZCxPQUFELEVBQVVPLEtBQVYsQ0FBUDtBQUNEOztBQXRCaUU7OztBQXlCcEVWLHVCQUF1QixDQUFDa0IsU0FBeEIsR0FBb0MseUJBQXBDO0FBQ0FsQix1QkFBdUIsQ0FBQ0QsWUFBeEIsR0FBdUNBLFlBQXZDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG5pbXBvcnQgeyBDb21wb3NpdGVMYXllciB9IGZyb20gJ2tlcGxlci1vdXRkYXRlZC1kZWNrLmdsLWNvcmUnO1xuaW1wb3J0IHsgU2NhdHRlcnBsb3RMYXllciwgTGluZUxheWVyIH0gZnJvbSAna2VwbGVyLW91dGRhdGVkLWRlY2suZ2wtbGF5ZXJzJztcblxuY29uc3QgZGVmYXVsdFByb3BzID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVsZXZhdGVkRWRpdEhhbmRsZUxheWVyIGV4dGVuZHMgQ29tcG9zaXRlTGF5ZXIge1xuICByZW5kZXJMYXllcnMoKSB7XG4gICAgY29uc3QgaGFuZGxlcyA9IG5ldyBTY2F0dGVycGxvdExheWVyKFxuICAgICAgT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5wcm9wcywge1xuICAgICAgICBpZDogYCR7dGhpcy5wcm9wcy5pZH0tU2NhdHRlcnBsb3RMYXllcmAsXG4gICAgICAgIGRhdGE6IHRoaXMucHJvcHMuZGF0YVxuICAgICAgfSlcbiAgICApO1xuXG4gICAgY29uc3QgbGluZXMgPSBuZXcgTGluZUxheWVyKFxuICAgICAgT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5wcm9wcywge1xuICAgICAgICBpZDogYCR7dGhpcy5wcm9wcy5pZH0tTGluZUxheWVyYCxcbiAgICAgICAgZGF0YTogdGhpcy5wcm9wcy5kYXRhLFxuICAgICAgICBwaWNrYWJsZTogZmFsc2UsXG4gICAgICAgIGdldFNvdXJjZVBvc2l0aW9uOiAoeyBwb3NpdGlvbiB9KSA9PiBbcG9zaXRpb25bMF0sIHBvc2l0aW9uWzFdLCAwXSxcbiAgICAgICAgZ2V0VGFyZ2V0UG9zaXRpb246ICh7IHBvc2l0aW9uIH0pID0+IFtwb3NpdGlvblswXSwgcG9zaXRpb25bMV0sIHBvc2l0aW9uWzJdIHx8IDBdLFxuICAgICAgICBnZXRDb2xvcjogWzE1MCwgMTUwLCAxNTAsIDIwMF0sXG4gICAgICAgIGdldFN0cm9rZVdpZHRoOiAzXG4gICAgICB9KVxuICAgICk7XG5cbiAgICByZXR1cm4gW2hhbmRsZXMsIGxpbmVzXTtcbiAgfVxufVxuXG5FbGV2YXRlZEVkaXRIYW5kbGVMYXllci5sYXllck5hbWUgPSAnRWxldmF0ZWRFZGl0SGFuZGxlTGF5ZXInO1xuRWxldmF0ZWRFZGl0SGFuZGxlTGF5ZXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuIl19