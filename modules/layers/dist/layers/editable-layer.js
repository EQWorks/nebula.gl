"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _keplerOutdatedDeck = require("kepler-outdated-deck.gl-core");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Minimum number of pixels the pointer must move from the original pointer down to be considered dragging
var MINIMUM_POINTER_MOVE_THRESHOLD_PIXELS = 7;

class EditableLayer extends _keplerOutdatedDeck.CompositeLayer {
  // Overridable interaction event handlers
  onLayerClick(event) {// default implementation - do nothing
  }

  onDoubleClick(event) {// default implementation - do nothing
  }

  onStartDragging(event) {// default implementation - do nothing
  }

  onStopDragging(event) {// default implementation - do nothing
  }

  onPointerMove(event) {} // default implementation - do nothing
  // TODO: implement onCancelDragging (e.g. drag off screen)


  initializeState() {
    this.setState({
      _editableLayerState: {
        // Pointer event handlers
        pointerHandlers: null,
        // Picked objects at the time the pointer went down
        pointerDownPicks: null,
        // Screen coordinates where the pointer went down
        pointerDownScreenCoords: null,
        // Ground coordinates where the pointer went down
        pointerDownGroundCoords: null,
        // Is the pointer dragging (pointer down + moved at least MINIMUM_POINTER_MOVE_THRESHOLD_PIXELS)
        isDragging: false
      }
    });
  }

  finalizeState() {
    this._removePointerHandlers();
  }

  updateState(_ref) {
    var props = _ref.props,
        changeFlags = _ref.changeFlags;

    // unsubscribe previous layer instance's handlers
    this._removePointerHandlers();

    this._addPointerHandlers();
  }

  _removePointerHandlers() {
    if (this.state._editableLayerState.pointerHandlers) {
      this.context.gl.canvas.removeEventListener('pointermove', this.state._editableLayerState.pointerHandlers.onPointerMove);
      this.context.gl.canvas.removeEventListener('pointerdown', this.state._editableLayerState.pointerHandlers.onPointerDown);
      this.context.gl.canvas.removeEventListener('pointerup', this.state._editableLayerState.pointerHandlers.onPointerUp);
      this.context.gl.canvas.removeEventListener('dblclick', this.state._editableLayerState.pointerHandlers.onDoubleClick);
    }

    this.state._editableLayerState.pointerHandlers = null;
  }

  _addPointerHandlers() {
    this.state._editableLayerState.pointerHandlers = {
      onPointerMove: this._onPointerMove.bind(this),
      onPointerDown: this._onPointerDown.bind(this),
      onPointerUp: this._onPointerUp.bind(this),
      onDoubleClick: this._onDoubleClick.bind(this)
    };
    this.context.gl.canvas.addEventListener('pointermove', this.state._editableLayerState.pointerHandlers.onPointerMove);
    this.context.gl.canvas.addEventListener('pointerdown', this.state._editableLayerState.pointerHandlers.onPointerDown);
    this.context.gl.canvas.addEventListener('pointerup', this.state._editableLayerState.pointerHandlers.onPointerUp);
    this.context.gl.canvas.addEventListener('dblclick', this.state._editableLayerState.pointerHandlers.onDoubleClick);
  }

  _onDoubleClick(event) {
    var screenCoords = this.getScreenCoords(event);
    var groundCoords = this.getGroundCoords(screenCoords);
    this.onDoubleClick({
      groundCoords: groundCoords,
      sourceEvent: event
    });
  }

  _onPointerDown(event) {
    var screenCoords = this.getScreenCoords(event);
    var groundCoords = this.getGroundCoords(screenCoords);
    var picks = this.context.deck.pickMultipleObjects({
      x: screenCoords[0],
      y: screenCoords[1],
      layerIds: [this.props.id],
      radius: this.props.pickingRadius,
      depth: this.props.pickingDepth
    });
    this.setState({
      _editableLayerState: _objectSpread({}, this.state._editableLayerState, {
        pointerDownScreenCoords: screenCoords,
        pointerDownGroundCoords: groundCoords,
        pointerDownPicks: picks,
        isDragging: false
      })
    });
  }

  _onPointerMove(event) {
    var screenCoords = this.getScreenCoords(event);
    var groundCoords = this.getGroundCoords(screenCoords);
    var _this$state$_editable = this.state._editableLayerState,
        pointerDownPicks = _this$state$_editable.pointerDownPicks,
        pointerDownScreenCoords = _this$state$_editable.pointerDownScreenCoords,
        pointerDownGroundCoords = _this$state$_editable.pointerDownGroundCoords;
    var isDragging = this.state._editableLayerState.isDragging;
    var startedDragging = false;

    if (pointerDownScreenCoords) {
      // Pointer went down and is moving
      // Did it move enough to consider it a drag
      if (!isDragging && this.movedEnoughForDrag(pointerDownScreenCoords, screenCoords)) {
        // OK, this is considered dragging
        // Fire the start dragging event
        this.onStartDragging({
          picks: pointerDownPicks,
          screenCoords: screenCoords,
          groundCoords: groundCoords,
          pointerDownScreenCoords: pointerDownScreenCoords,
          pointerDownGroundCoords: pointerDownGroundCoords,
          sourceEvent: event
        });
        startedDragging = true;
        isDragging = true;
        this.setState({
          _editableLayerState: _objectSpread({}, this.state._editableLayerState, {
            isDragging: isDragging
          })
        });
      }
    }

    if (!startedDragging) {
      var picks = this.context.deck.pickMultipleObjects({
        x: screenCoords[0],
        y: screenCoords[1],
        layerIds: [this.props.id],
        radius: this.props.pickingRadius,
        depth: this.props.pickingDepth
      });
      this.onPointerMove({
        screenCoords: screenCoords,
        groundCoords: groundCoords,
        picks: picks,
        isDragging: isDragging,
        pointerDownPicks: pointerDownPicks,
        pointerDownScreenCoords: pointerDownScreenCoords,
        pointerDownGroundCoords: pointerDownGroundCoords,
        sourceEvent: event
      });
    }
  }

  _onPointerUp(event) {
    var screenCoords = this.getScreenCoords(event);
    var groundCoords = this.getGroundCoords(screenCoords);
    var _this$state$_editable2 = this.state._editableLayerState,
        pointerDownPicks = _this$state$_editable2.pointerDownPicks,
        pointerDownScreenCoords = _this$state$_editable2.pointerDownScreenCoords,
        pointerDownGroundCoords = _this$state$_editable2.pointerDownGroundCoords,
        isDragging = _this$state$_editable2.isDragging;

    if (!pointerDownScreenCoords) {
      // This is a pointer up without a pointer down (e.g. user pointer downed elsewhere), so ignore
      return;
    }

    if (isDragging) {
      this.onStopDragging({
        picks: pointerDownPicks,
        screenCoords: screenCoords,
        groundCoords: groundCoords,
        pointerDownScreenCoords: pointerDownScreenCoords,
        pointerDownGroundCoords: pointerDownGroundCoords,
        sourceEvent: event
      });
    } else if (!this.movedEnoughForDrag(pointerDownScreenCoords, screenCoords)) {
      this.onLayerClick({
        picks: pointerDownPicks,
        screenCoords: screenCoords,
        groundCoords: groundCoords,
        sourceEvent: event
      });
    }

    this.setState({
      _editableLayerState: _objectSpread({}, this.state._editableLayerState, {
        pointerDownScreenCoords: null,
        pointerDownGroundCoords: null,
        pointerDownPicks: null,
        isDragging: false
      })
    });
  }

  getScreenCoords(pointerEvent) {
    return [pointerEvent.clientX - this.context.gl.canvas.getBoundingClientRect().x, pointerEvent.clientY - this.context.gl.canvas.getBoundingClientRect().y];
  }

  getGroundCoords(screenCoords) {
    return this.context.viewport.unproject([screenCoords[0], screenCoords[1]]);
  }

  movedEnoughForDrag(screenCoords1, screenCoords2) {
    return Math.abs(screenCoords1[0] - screenCoords2[0]) > MINIMUM_POINTER_MOVE_THRESHOLD_PIXELS || Math.abs(screenCoords1[1] - screenCoords2[1]) > MINIMUM_POINTER_MOVE_THRESHOLD_PIXELS;
  }

}

exports.default = EditableLayer;
EditableLayer.layerName = 'EditableLayer';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,