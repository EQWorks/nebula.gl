"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RotateHandler = void 0;

var _centroid = _interopRequireDefault(require("@turf/centroid"));

var _bearing = _interopRequireDefault(require("@turf/bearing"));

var _transformRotate = _interopRequireDefault(require("@turf/transform-rotate"));

var _modeHandler = require("./mode-handler.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// TODO edit-modes: delete handlers once EditMode fully implemented
class RotateHandler extends _modeHandler.ModeHandler {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_isRotatable", void 0);

    _defineProperty(this, "_geometryBeingRotated", void 0);
  }

  handlePointerMove(event) {
    var editAction = null;
    this._isRotatable = Boolean(this._geometryBeingRotated) || this.isSelectionPicked(event.picks);

    if (!this._isRotatable || !event.pointerDownGroundCoords) {
      // Nothing to do
      return {
        editAction: null,
        cancelMapPan: false
      };
    }

    if (event.isDragging && this._geometryBeingRotated) {
      // Rotate the geometry
      editAction = this.getRotateAction(event.pointerDownGroundCoords, event.groundCoords, 'rotating');
    }

    return {
      editAction: editAction,
      cancelMapPan: true
    };
  }

  handleStartDragging(event) {
    if (!this._isRotatable) {
      return null;
    }

    this._geometryBeingRotated = this.getSelectedFeaturesAsFeatureCollection();
    return null;
  }

  handleStopDragging(event) {
    var editAction = null;

    if (this._geometryBeingRotated) {
      // Rotate the geometry
      editAction = this.getRotateAction(event.pointerDownGroundCoords, event.groundCoords, 'rotated');
      this._geometryBeingRotated = null;
    }

    return editAction;
  }

  getCursor(_ref) {
    var isDragging = _ref.isDragging;

    if (this._isRotatable) {
      // TODO: look at doing SVG cursors to get a better "rotate" cursor
      return 'move';
    }

    return isDragging ? 'grabbing' : 'grab';
  }

  getRotateAction(startDragPoint, currentPoint, editType) {
    var startPosition = startDragPoint;
    var centroid = (0, _centroid.default)(this._geometryBeingRotated);
    var angle = getRotationAngle(centroid, startPosition, currentPoint);
    var rotatedFeatures = (0, _transformRotate.default)(this._geometryBeingRotated, angle);
    var updatedData = this.getImmutableFeatureCollection();
    var selectedIndexes = this.getSelectedFeatureIndexes();

    for (var i = 0; i < selectedIndexes.length; i++) {
      var selectedIndex = selectedIndexes[i];
      var movedFeature = rotatedFeatures.features[i];
      updatedData = updatedData.replaceGeometry(selectedIndex, movedFeature.geometry);
    }

    return {
      updatedData: updatedData.getObject(),
      editType: editType,
      featureIndexes: selectedIndexes,
      editContext: null
    };
  }

}

exports.RotateHandler = RotateHandler;

function getRotationAngle(centroid, startDragPoint, currentPoint) {
  var bearing1 = (0, _bearing.default)(centroid, startDragPoint);
  var bearing2 = (0, _bearing.default)(centroid, currentPoint);
  return bearing2 - bearing1;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,