"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExtrudeHandler = void 0;

var _bearing = _interopRequireDefault(require("@turf/bearing"));

var _utils = require("../utils");

var _modeHandler = require("./mode-handler.js");

var _modifyHandler = require("./modify-handler");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// TODO edit-modes: delete handlers once EditMode fully implemented
class ExtrudeHandler extends _modifyHandler.ModifyHandler {
  constructor() {
    super(...arguments);

    _defineProperty(this, "isPointAdded", false);
  }

  handlePointerMove(event) {
    this._lastPointerMovePicks = event.picks;
    var editAction = null;
    var editHandle = (0, _modeHandler.getPickedEditHandle)(event.pointerDownPicks);

    if (event.isDragging && editHandle) {
      var size = this.coordinatesSize(editHandle.positionIndexes, editHandle.featureIndex);
      var positionIndexes = this.isPointAdded ? this.nextPositionIndexes(editHandle.positionIndexes, size) : editHandle.positionIndexes; // p1 and p1 are end points for edge

      var p1 = this.getPointForPositionIndexes(this.prevPositionIndexes(positionIndexes, size), editHandle.featureIndex);
      var p2 = this.getPointForPositionIndexes(positionIndexes, editHandle.featureIndex);

      if (p1 && p2) {
        // p3 and p4 are end points for moving (extruding) edge
        var _generatePointsParall = (0, _utils.generatePointsParallelToLinePoints)(p1, p2, event.groundCoords),
            _generatePointsParall2 = _slicedToArray(_generatePointsParall, 2),
            p3 = _generatePointsParall2[0],
            p4 = _generatePointsParall2[1];

        var updatedData = this.getImmutableFeatureCollection().replacePosition(editHandle.featureIndex, this.prevPositionIndexes(positionIndexes, size), p4).replacePosition(editHandle.featureIndex, positionIndexes, p3).getObject();
        editAction = {
          updatedData: updatedData,
          editType: 'extruding',
          featureIndexes: [editHandle.featureIndex],
          editContext: {
            positionIndexes: this.nextPositionIndexes(editHandle.positionIndexes, size),
            position: p3
          }
        };
      }
    } // Cancel map panning if pointer went down on an edit handle


    var cancelMapPan = Boolean(editHandle);
    return {
      editAction: editAction,
      cancelMapPan: cancelMapPan
    };
  }

  handleStartDragging(event) {
    var editAction = null;
    var selectedFeatureIndexes = this.getSelectedFeatureIndexes();
    var editHandle = (0, _modeHandler.getPickedEditHandle)(event.picks);

    if (selectedFeatureIndexes.length && editHandle && editHandle.type === 'intermediate') {
      var size = this.coordinatesSize(editHandle.positionIndexes, editHandle.featureIndex); // p1 and p1 are end points for edge

      var p1 = this.getPointForPositionIndexes(this.prevPositionIndexes(editHandle.positionIndexes, size), editHandle.featureIndex);
      var p2 = this.getPointForPositionIndexes(editHandle.positionIndexes, editHandle.featureIndex);

      if (p1 && p2) {
        var updatedData = this.getImmutableFeatureCollection();

        if (!this.isOrthogonal(editHandle.positionIndexes, editHandle.featureIndex, size)) {
          updatedData = updatedData.addPosition(editHandle.featureIndex, editHandle.positionIndexes, p2);
        }

        if (!this.isOrthogonal(this.prevPositionIndexes(editHandle.positionIndexes, size), editHandle.featureIndex, size)) {
          updatedData = updatedData.addPosition(editHandle.featureIndex, editHandle.positionIndexes, p1);
          this.isPointAdded = true;
        }

        editAction = {
          updatedData: updatedData.getObject(),
          editType: 'startExtruding',
          featureIndexes: [editHandle.featureIndex],
          editContext: {
            positionIndexes: editHandle.positionIndexes,
            position: p1
          }
        };
      }
    }

    return editAction;
  }

  handleStopDragging(event) {
    var editAction = null;
    var selectedFeatureIndexes = this.getSelectedFeatureIndexes();
    var editHandle = (0, _modeHandler.getPickedEditHandle)(event.picks);

    if (selectedFeatureIndexes.length && editHandle) {
      var size = this.coordinatesSize(editHandle.positionIndexes, editHandle.featureIndex);
      var positionIndexes = this.isPointAdded ? this.nextPositionIndexes(editHandle.positionIndexes, size) : editHandle.positionIndexes; // p1 and p1 are end points for edge

      var p1 = this.getPointForPositionIndexes(this.prevPositionIndexes(positionIndexes, size), editHandle.featureIndex);
      var p2 = this.getPointForPositionIndexes(positionIndexes, editHandle.featureIndex);

      if (p1 && p2) {
        // p3 and p4 are end points for new moved (extruded) edge
        var _generatePointsParall3 = (0, _utils.generatePointsParallelToLinePoints)(p1, p2, event.groundCoords),
            _generatePointsParall4 = _slicedToArray(_generatePointsParall3, 2),
            p3 = _generatePointsParall4[0],
            p4 = _generatePointsParall4[1];

        var updatedData = this.getImmutableFeatureCollection().replacePosition(editHandle.featureIndex, this.prevPositionIndexes(positionIndexes, size), p4).replacePosition(editHandle.featureIndex, positionIndexes, p3).getObject();
        editAction = {
          updatedData: updatedData,
          editType: 'extruded',
          featureIndexes: [editHandle.featureIndex],
          editContext: {
            positionIndexes: editHandle.positionIndexes,
            position: p3
          }
        };
      }
    }

    this.isPointAdded = false;
    return editAction;
  }

  coordinatesSize(positionIndexes, featureIndex) {
    var size = 0;
    var feature = this.getImmutableFeatureCollection().getObject().features[featureIndex];
    var coordinates = feature.geometry.coordinates; // for Multi polygons, length will be 3

    if (positionIndexes.length === 3) {
      var _positionIndexes = _slicedToArray(positionIndexes, 2),
          a = _positionIndexes[0],
          b = _positionIndexes[1];

      if (coordinates.length && coordinates[a].length) {
        size = coordinates[a][b].length;
      }
    } else {
      var _positionIndexes2 = _slicedToArray(positionIndexes, 1),
          _b = _positionIndexes2[0];

      if (coordinates.length && coordinates[_b].length) {
        size = coordinates[_b].length;
      }
    }

    return size;
  }

  getBearing(p1, p2) {
    var angle = (0, _bearing.default)(p1, p2);

    if (angle < 0) {
      return Math.floor(360 + angle);
    }

    return Math.floor(angle);
  }

  isOrthogonal(positionIndexes, featureIndex, size) {
    if (positionIndexes[positionIndexes.length - 1] === size - 1) {
      positionIndexes[positionIndexes.length - 1] = 0;
    }

    var prevPoint = this.getPointForPositionIndexes(this.prevPositionIndexes(positionIndexes, size), featureIndex);
    var nextPoint = this.getPointForPositionIndexes(this.nextPositionIndexes(positionIndexes, size), featureIndex);
    var currentPoint = this.getPointForPositionIndexes(positionIndexes, featureIndex);
    var prevAngle = this.getBearing(currentPoint, prevPoint);
    var nextAngle = this.getBearing(currentPoint, nextPoint);
    return [89, 90, 91, 269, 270, 271].includes(Math.abs(prevAngle - nextAngle));
  }

  nextPositionIndexes(positionIndexes, size) {
    var next = _toConsumableArray(positionIndexes);

    if (next.length) {
      next[next.length - 1] = next[next.length - 1] === size - 1 ? 0 : next[next.length - 1] + 1;
    }

    return next;
  }

  prevPositionIndexes(positionIndexes, size) {
    var prev = _toConsumableArray(positionIndexes);

    if (prev.length) {
      prev[prev.length - 1] = prev[prev.length - 1] === 0 ? size - 2 : prev[prev.length - 1] - 1;
    }

    return prev;
  }

  getPointForPositionIndexes(positionIndexes, featureIndex) {
    var p1;
    var feature = this.getImmutableFeatureCollection().getObject().features[featureIndex];
    var coordinates = feature.geometry.coordinates; // for Multi polygons, length will be 3

    if (positionIndexes.length === 3) {
      var _positionIndexes3 = _slicedToArray(positionIndexes, 3),
          a = _positionIndexes3[0],
          b = _positionIndexes3[1],
          c = _positionIndexes3[2];

      if (coordinates.length && coordinates[a].length) {
        p1 = coordinates[a][b][c];
      }
    } else {
      var _positionIndexes4 = _slicedToArray(positionIndexes, 2),
          _b2 = _positionIndexes4[0],
          _c = _positionIndexes4[1];

      if (coordinates.length && coordinates[_b2].length) {
        p1 = coordinates[_b2][_c];
      }
    }

    return p1;
  }

}

exports.ExtrudeHandler = ExtrudeHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,