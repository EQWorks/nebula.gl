"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TranslateHandler = void 0;

var _bearing = _interopRequireDefault(require("@turf/bearing"));

var _distance = _interopRequireDefault(require("@turf/distance"));

var _transformTranslate = _interopRequireDefault(require("@turf/transform-translate"));

var _helpers = require("@turf/helpers");

var _modeHandler = require("./mode-handler.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// TODO edit-modes: delete handlers once EditMode fully implemented
class TranslateHandler extends _modeHandler.ModeHandler {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_geometryBeforeTranslate", void 0);

    _defineProperty(this, "_isTranslatable", void 0);
  }

  handlePointerMove(event) {
    var editAction = null;
    this._isTranslatable = Boolean(this._geometryBeforeTranslate) || this.isSelectionPicked(event.picks);

    if (!this._isTranslatable || !event.pointerDownGroundCoords) {
      // Nothing to do
      return {
        editAction: null,
        cancelMapPan: false
      };
    }

    if (event.isDragging && this._geometryBeforeTranslate) {
      // Translate the geometry
      editAction = this.getTranslateAction(event.pointerDownGroundCoords, event.groundCoords, 'translating');
    }

    return {
      editAction: editAction,
      cancelMapPan: true
    };
  }

  handleStartDragging(event) {
    if (!this._isTranslatable) {
      return null;
    }

    this._geometryBeforeTranslate = this.getSelectedFeaturesAsFeatureCollection();
    return null;
  }

  handleStopDragging(event) {
    var editAction = null;

    if (this._geometryBeforeTranslate) {
      // Translate the geometry
      editAction = this.getTranslateAction(event.pointerDownGroundCoords, event.groundCoords, 'translated');
      this._geometryBeforeTranslate = null;
    }

    return editAction;
  }

  getCursor(_ref) {
    var isDragging = _ref.isDragging;

    if (this._isTranslatable) {
      return 'move';
    }

    return isDragging ? 'grabbing' : 'grab';
  }

  getTranslateAction(startDragPoint, currentPoint, editType) {
    if (!this._geometryBeforeTranslate) {
      return null;
    }

    var p1 = (0, _helpers.point)(startDragPoint);
    var p2 = (0, _helpers.point)(currentPoint);
    var distanceMoved = (0, _distance.default)(p1, p2);
    var direction = (0, _bearing.default)(p1, p2);
    var movedFeatures = (0, _transformTranslate.default)(this._geometryBeforeTranslate, distanceMoved, direction);
    var updatedData = this.getImmutableFeatureCollection();
    var selectedIndexes = this.getSelectedFeatureIndexes();

    for (var i = 0; i < selectedIndexes.length; i++) {
      var selectedIndex = selectedIndexes[i];
      var movedFeature = movedFeatures.features[i];
      updatedData = updatedData.replaceGeometry(selectedIndex, movedFeature.geometry);
    }

    return {
      updatedData: updatedData.getObject(),
      editType: editType,
      featureIndexes: selectedIndexes,
      editContext: null
    };
  }

}

exports.TranslateHandler = TranslateHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,