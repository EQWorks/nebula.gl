"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DrawLineStringHandler = void 0;

var _modeHandler = require("./mode-handler.js");

// TODO edit-modes: delete handlers once EditMode fully implemented
class DrawLineStringHandler extends _modeHandler.ModeHandler {
  handleClick(event) {
    super.handleClick(event);
    var editAction = null;
    var selectedFeatureIndexes = this.getSelectedFeatureIndexes();
    var selectedGeometry = this.getSelectedGeometry();
    var tentativeFeature = this.getTentativeFeature();
    var clickSequence = this.getClickSequence();

    if (selectedFeatureIndexes.length > 1 || selectedGeometry && selectedGeometry.type !== 'LineString') {
      console.warn("drawLineString mode only supported for single LineString selection"); // eslint-disable-line

      this.resetClickSequence();
      return null;
    }

    if (selectedGeometry && selectedGeometry.type === 'LineString') {
      // Extend the LineString
      var lineString = selectedGeometry;
      var positionIndexes = [lineString.coordinates.length];
      var modeConfig = this.getModeConfig();

      if (modeConfig && modeConfig.drawAtFront) {
        positionIndexes = [0];
      }

      var featureIndex = selectedFeatureIndexes[0];
      var updatedData = this.getImmutableFeatureCollection().addPosition(featureIndex, positionIndexes, event.groundCoords).getObject();
      editAction = {
        updatedData: updatedData,
        editType: 'addPosition',
        featureIndexes: [featureIndex],
        editContext: {
          positionIndexes: positionIndexes,
          position: event.groundCoords
        }
      };
      this.resetClickSequence();
    } else if (clickSequence.length === 2 && tentativeFeature) {
      // Add a new LineString
      var geometry = tentativeFeature.geometry;
      editAction = this.getAddFeatureAction(geometry);
      this.resetClickSequence();
    }

    return editAction;
  }

  handlePointerMove(event) {
    var result = {
      editAction: null,
      cancelMapPan: false
    };
    var clickSequence = this.getClickSequence();
    var groundCoords = event.groundCoords;
    var startPosition = null;
    var selectedFeatureIndexes = this.getSelectedFeatureIndexes();
    var selectedGeometry = this.getSelectedGeometry();

    if (selectedFeatureIndexes.length > 1 || selectedGeometry && selectedGeometry.type !== 'LineString') {
      // unsupported
      return result;
    }

    if (selectedGeometry && selectedGeometry.type === 'LineString') {
      // Draw an extension line starting from one end of the selected LineString
      startPosition = selectedGeometry.coordinates[selectedGeometry.coordinates.length - 1];
      var modeConfig = this.getModeConfig();

      if (modeConfig && modeConfig.drawAtFront) {
        startPosition = selectedGeometry.coordinates[0];
      }
    } else if (clickSequence.length === 1) {
      startPosition = clickSequence[0];
    }

    if (startPosition) {
      this._setTentativeFeature({
        type: 'Feature',
        properties: {},
        geometry: {
          type: 'LineString',
          coordinates: [startPosition, groundCoords]
        }
      });
    }

    return result;
  }

}

exports.DrawLineStringHandler = DrawLineStringHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlLWhhbmRsZXJzL2RyYXctbGluZS1zdHJpbmctaGFuZGxlci5qcyJdLCJuYW1lcyI6WyJEcmF3TGluZVN0cmluZ0hhbmRsZXIiLCJNb2RlSGFuZGxlciIsImhhbmRsZUNsaWNrIiwiZXZlbnQiLCJlZGl0QWN0aW9uIiwic2VsZWN0ZWRGZWF0dXJlSW5kZXhlcyIsImdldFNlbGVjdGVkRmVhdHVyZUluZGV4ZXMiLCJzZWxlY3RlZEdlb21ldHJ5IiwiZ2V0U2VsZWN0ZWRHZW9tZXRyeSIsInRlbnRhdGl2ZUZlYXR1cmUiLCJnZXRUZW50YXRpdmVGZWF0dXJlIiwiY2xpY2tTZXF1ZW5jZSIsImdldENsaWNrU2VxdWVuY2UiLCJsZW5ndGgiLCJ0eXBlIiwiY29uc29sZSIsIndhcm4iLCJyZXNldENsaWNrU2VxdWVuY2UiLCJsaW5lU3RyaW5nIiwicG9zaXRpb25JbmRleGVzIiwiY29vcmRpbmF0ZXMiLCJtb2RlQ29uZmlnIiwiZ2V0TW9kZUNvbmZpZyIsImRyYXdBdEZyb250IiwiZmVhdHVyZUluZGV4IiwidXBkYXRlZERhdGEiLCJnZXRJbW11dGFibGVGZWF0dXJlQ29sbGVjdGlvbiIsImFkZFBvc2l0aW9uIiwiZ3JvdW5kQ29vcmRzIiwiZ2V0T2JqZWN0IiwiZWRpdFR5cGUiLCJmZWF0dXJlSW5kZXhlcyIsImVkaXRDb250ZXh0IiwicG9zaXRpb24iLCJnZW9tZXRyeSIsImdldEFkZEZlYXR1cmVBY3Rpb24iLCJoYW5kbGVQb2ludGVyTW92ZSIsInJlc3VsdCIsImNhbmNlbE1hcFBhbiIsInN0YXJ0UG9zaXRpb24iLCJfc2V0VGVudGF0aXZlRmVhdHVyZSIsInByb3BlcnRpZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFLQTs7QUFFQTtBQUNPLE1BQU1BLHFCQUFOLFNBQW9DQyx3QkFBcEMsQ0FBZ0Q7QUFDckRDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFpQztBQUMxQyxVQUFNRCxXQUFOLENBQWtCQyxLQUFsQjtBQUVBLFFBQUlDLFVBQXVCLEdBQUcsSUFBOUI7QUFDQSxRQUFNQyxzQkFBc0IsR0FBRyxLQUFLQyx5QkFBTCxFQUEvQjtBQUNBLFFBQU1DLGdCQUFnQixHQUFHLEtBQUtDLG1CQUFMLEVBQXpCO0FBQ0EsUUFBTUMsZ0JBQWdCLEdBQUcsS0FBS0MsbUJBQUwsRUFBekI7QUFDQSxRQUFNQyxhQUFhLEdBQUcsS0FBS0MsZ0JBQUwsRUFBdEI7O0FBRUEsUUFDRVAsc0JBQXNCLENBQUNRLE1BQXZCLEdBQWdDLENBQWhDLElBQ0NOLGdCQUFnQixJQUFJQSxnQkFBZ0IsQ0FBQ08sSUFBakIsS0FBMEIsWUFGakQsRUFHRTtBQUNBQyxNQUFBQSxPQUFPLENBQUNDLElBQVIsdUVBREEsQ0FDb0Y7O0FBQ3BGLFdBQUtDLGtCQUFMO0FBQ0EsYUFBTyxJQUFQO0FBQ0Q7O0FBRUQsUUFBSVYsZ0JBQWdCLElBQUlBLGdCQUFnQixDQUFDTyxJQUFqQixLQUEwQixZQUFsRCxFQUFnRTtBQUM5RDtBQUNBLFVBQU1JLFVBQXNCLEdBQUdYLGdCQUEvQjtBQUVBLFVBQUlZLGVBQWUsR0FBRyxDQUFDRCxVQUFVLENBQUNFLFdBQVgsQ0FBdUJQLE1BQXhCLENBQXRCO0FBRUEsVUFBTVEsVUFBVSxHQUFHLEtBQUtDLGFBQUwsRUFBbkI7O0FBQ0EsVUFBSUQsVUFBVSxJQUFJQSxVQUFVLENBQUNFLFdBQTdCLEVBQTBDO0FBQ3hDSixRQUFBQSxlQUFlLEdBQUcsQ0FBQyxDQUFELENBQWxCO0FBQ0Q7O0FBQ0QsVUFBTUssWUFBWSxHQUFHbkIsc0JBQXNCLENBQUMsQ0FBRCxDQUEzQztBQUNBLFVBQU1vQixXQUFXLEdBQUcsS0FBS0MsNkJBQUwsR0FDakJDLFdBRGlCLENBQ0xILFlBREssRUFDU0wsZUFEVCxFQUMwQmhCLEtBQUssQ0FBQ3lCLFlBRGhDLEVBRWpCQyxTQUZpQixFQUFwQjtBQUlBekIsTUFBQUEsVUFBVSxHQUFHO0FBQ1hxQixRQUFBQSxXQUFXLEVBQVhBLFdBRFc7QUFFWEssUUFBQUEsUUFBUSxFQUFFLGFBRkM7QUFHWEMsUUFBQUEsY0FBYyxFQUFFLENBQUNQLFlBQUQsQ0FITDtBQUlYUSxRQUFBQSxXQUFXLEVBQUU7QUFDWGIsVUFBQUEsZUFBZSxFQUFmQSxlQURXO0FBRVhjLFVBQUFBLFFBQVEsRUFBRTlCLEtBQUssQ0FBQ3lCO0FBRkw7QUFKRixPQUFiO0FBVUEsV0FBS1gsa0JBQUw7QUFDRCxLQTFCRCxNQTBCTyxJQUFJTixhQUFhLENBQUNFLE1BQWQsS0FBeUIsQ0FBekIsSUFBOEJKLGdCQUFsQyxFQUFvRDtBQUN6RDtBQUNBLFVBQU15QixRQUFhLEdBQUd6QixnQkFBZ0IsQ0FBQ3lCLFFBQXZDO0FBQ0E5QixNQUFBQSxVQUFVLEdBQUcsS0FBSytCLG1CQUFMLENBQXlCRCxRQUF6QixDQUFiO0FBRUEsV0FBS2pCLGtCQUFMO0FBQ0Q7O0FBRUQsV0FBT2IsVUFBUDtBQUNEOztBQUVEZ0MsRUFBQUEsaUJBQWlCLENBQUNqQyxLQUFELEVBQThFO0FBQzdGLFFBQU1rQyxNQUFNLEdBQUc7QUFBRWpDLE1BQUFBLFVBQVUsRUFBRSxJQUFkO0FBQW9Ca0MsTUFBQUEsWUFBWSxFQUFFO0FBQWxDLEtBQWY7QUFFQSxRQUFNM0IsYUFBYSxHQUFHLEtBQUtDLGdCQUFMLEVBQXRCO0FBQ0EsUUFBTWdCLFlBQVksR0FBR3pCLEtBQUssQ0FBQ3lCLFlBQTNCO0FBRUEsUUFBSVcsYUFBd0IsR0FBRyxJQUEvQjtBQUNBLFFBQU1sQyxzQkFBc0IsR0FBRyxLQUFLQyx5QkFBTCxFQUEvQjtBQUNBLFFBQU1DLGdCQUFnQixHQUFHLEtBQUtDLG1CQUFMLEVBQXpCOztBQUVBLFFBQ0VILHNCQUFzQixDQUFDUSxNQUF2QixHQUFnQyxDQUFoQyxJQUNDTixnQkFBZ0IsSUFBSUEsZ0JBQWdCLENBQUNPLElBQWpCLEtBQTBCLFlBRmpELEVBR0U7QUFDQTtBQUNBLGFBQU91QixNQUFQO0FBQ0Q7O0FBRUQsUUFBSTlCLGdCQUFnQixJQUFJQSxnQkFBZ0IsQ0FBQ08sSUFBakIsS0FBMEIsWUFBbEQsRUFBZ0U7QUFDOUQ7QUFDQXlCLE1BQUFBLGFBQWEsR0FBR2hDLGdCQUFnQixDQUFDYSxXQUFqQixDQUE2QmIsZ0JBQWdCLENBQUNhLFdBQWpCLENBQTZCUCxNQUE3QixHQUFzQyxDQUFuRSxDQUFoQjtBQUVBLFVBQU1RLFVBQVUsR0FBRyxLQUFLQyxhQUFMLEVBQW5COztBQUNBLFVBQUlELFVBQVUsSUFBSUEsVUFBVSxDQUFDRSxXQUE3QixFQUEwQztBQUN4Q2dCLFFBQUFBLGFBQWEsR0FBR2hDLGdCQUFnQixDQUFDYSxXQUFqQixDQUE2QixDQUE3QixDQUFoQjtBQUNEO0FBQ0YsS0FSRCxNQVFPLElBQUlULGFBQWEsQ0FBQ0UsTUFBZCxLQUF5QixDQUE3QixFQUFnQztBQUNyQzBCLE1BQUFBLGFBQWEsR0FBRzVCLGFBQWEsQ0FBQyxDQUFELENBQTdCO0FBQ0Q7O0FBRUQsUUFBSTRCLGFBQUosRUFBbUI7QUFDakIsV0FBS0Msb0JBQUwsQ0FBMEI7QUFDeEIxQixRQUFBQSxJQUFJLEVBQUUsU0FEa0I7QUFFeEIyQixRQUFBQSxVQUFVLEVBQUUsRUFGWTtBQUd4QlAsUUFBQUEsUUFBUSxFQUFFO0FBQ1JwQixVQUFBQSxJQUFJLEVBQUUsWUFERTtBQUVSTSxVQUFBQSxXQUFXLEVBQUUsQ0FBQ21CLGFBQUQsRUFBZ0JYLFlBQWhCO0FBRkw7QUFIYyxPQUExQjtBQVFEOztBQUVELFdBQU9TLE1BQVA7QUFDRDs7QUFsR29EIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IHR5cGUgeyBQb3NpdGlvbiwgTGluZVN0cmluZyB9IGZyb20gJ2tlcGxlci1vdXRkYXRlZC1uZWJ1bGEuZ2wtZWRpdC1tb2Rlcyc7XG5pbXBvcnQgdHlwZSB7IENsaWNrRXZlbnQsIFBvaW50ZXJNb3ZlRXZlbnQgfSBmcm9tICcuLi9ldmVudC10eXBlcy5qcyc7XG5pbXBvcnQgdHlwZSB7IEVkaXRBY3Rpb24gfSBmcm9tICcuL21vZGUtaGFuZGxlci5qcyc7XG5pbXBvcnQgeyBNb2RlSGFuZGxlciB9IGZyb20gJy4vbW9kZS1oYW5kbGVyLmpzJztcblxuLy8gVE9ETyBlZGl0LW1vZGVzOiBkZWxldGUgaGFuZGxlcnMgb25jZSBFZGl0TW9kZSBmdWxseSBpbXBsZW1lbnRlZFxuZXhwb3J0IGNsYXNzIERyYXdMaW5lU3RyaW5nSGFuZGxlciBleHRlbmRzIE1vZGVIYW5kbGVyIHtcbiAgaGFuZGxlQ2xpY2soZXZlbnQ6IENsaWNrRXZlbnQpOiA/RWRpdEFjdGlvbiB7XG4gICAgc3VwZXIuaGFuZGxlQ2xpY2soZXZlbnQpO1xuXG4gICAgbGV0IGVkaXRBY3Rpb246ID9FZGl0QWN0aW9uID0gbnVsbDtcbiAgICBjb25zdCBzZWxlY3RlZEZlYXR1cmVJbmRleGVzID0gdGhpcy5nZXRTZWxlY3RlZEZlYXR1cmVJbmRleGVzKCk7XG4gICAgY29uc3Qgc2VsZWN0ZWRHZW9tZXRyeSA9IHRoaXMuZ2V0U2VsZWN0ZWRHZW9tZXRyeSgpO1xuICAgIGNvbnN0IHRlbnRhdGl2ZUZlYXR1cmUgPSB0aGlzLmdldFRlbnRhdGl2ZUZlYXR1cmUoKTtcbiAgICBjb25zdCBjbGlja1NlcXVlbmNlID0gdGhpcy5nZXRDbGlja1NlcXVlbmNlKCk7XG5cbiAgICBpZiAoXG4gICAgICBzZWxlY3RlZEZlYXR1cmVJbmRleGVzLmxlbmd0aCA+IDEgfHxcbiAgICAgIChzZWxlY3RlZEdlb21ldHJ5ICYmIHNlbGVjdGVkR2VvbWV0cnkudHlwZSAhPT0gJ0xpbmVTdHJpbmcnKVxuICAgICkge1xuICAgICAgY29uc29sZS53YXJuKGBkcmF3TGluZVN0cmluZyBtb2RlIG9ubHkgc3VwcG9ydGVkIGZvciBzaW5nbGUgTGluZVN0cmluZyBzZWxlY3Rpb25gKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgdGhpcy5yZXNldENsaWNrU2VxdWVuY2UoKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChzZWxlY3RlZEdlb21ldHJ5ICYmIHNlbGVjdGVkR2VvbWV0cnkudHlwZSA9PT0gJ0xpbmVTdHJpbmcnKSB7XG4gICAgICAvLyBFeHRlbmQgdGhlIExpbmVTdHJpbmdcbiAgICAgIGNvbnN0IGxpbmVTdHJpbmc6IExpbmVTdHJpbmcgPSBzZWxlY3RlZEdlb21ldHJ5O1xuXG4gICAgICBsZXQgcG9zaXRpb25JbmRleGVzID0gW2xpbmVTdHJpbmcuY29vcmRpbmF0ZXMubGVuZ3RoXTtcblxuICAgICAgY29uc3QgbW9kZUNvbmZpZyA9IHRoaXMuZ2V0TW9kZUNvbmZpZygpO1xuICAgICAgaWYgKG1vZGVDb25maWcgJiYgbW9kZUNvbmZpZy5kcmF3QXRGcm9udCkge1xuICAgICAgICBwb3NpdGlvbkluZGV4ZXMgPSBbMF07XG4gICAgICB9XG4gICAgICBjb25zdCBmZWF0dXJlSW5kZXggPSBzZWxlY3RlZEZlYXR1cmVJbmRleGVzWzBdO1xuICAgICAgY29uc3QgdXBkYXRlZERhdGEgPSB0aGlzLmdldEltbXV0YWJsZUZlYXR1cmVDb2xsZWN0aW9uKClcbiAgICAgICAgLmFkZFBvc2l0aW9uKGZlYXR1cmVJbmRleCwgcG9zaXRpb25JbmRleGVzLCBldmVudC5ncm91bmRDb29yZHMpXG4gICAgICAgIC5nZXRPYmplY3QoKTtcblxuICAgICAgZWRpdEFjdGlvbiA9IHtcbiAgICAgICAgdXBkYXRlZERhdGEsXG4gICAgICAgIGVkaXRUeXBlOiAnYWRkUG9zaXRpb24nLFxuICAgICAgICBmZWF0dXJlSW5kZXhlczogW2ZlYXR1cmVJbmRleF0sXG4gICAgICAgIGVkaXRDb250ZXh0OiB7XG4gICAgICAgICAgcG9zaXRpb25JbmRleGVzLFxuICAgICAgICAgIHBvc2l0aW9uOiBldmVudC5ncm91bmRDb29yZHNcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5yZXNldENsaWNrU2VxdWVuY2UoKTtcbiAgICB9IGVsc2UgaWYgKGNsaWNrU2VxdWVuY2UubGVuZ3RoID09PSAyICYmIHRlbnRhdGl2ZUZlYXR1cmUpIHtcbiAgICAgIC8vIEFkZCBhIG5ldyBMaW5lU3RyaW5nXG4gICAgICBjb25zdCBnZW9tZXRyeTogYW55ID0gdGVudGF0aXZlRmVhdHVyZS5nZW9tZXRyeTtcbiAgICAgIGVkaXRBY3Rpb24gPSB0aGlzLmdldEFkZEZlYXR1cmVBY3Rpb24oZ2VvbWV0cnkpO1xuXG4gICAgICB0aGlzLnJlc2V0Q2xpY2tTZXF1ZW5jZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBlZGl0QWN0aW9uO1xuICB9XG5cbiAgaGFuZGxlUG9pbnRlck1vdmUoZXZlbnQ6IFBvaW50ZXJNb3ZlRXZlbnQpOiB7IGVkaXRBY3Rpb246ID9FZGl0QWN0aW9uLCBjYW5jZWxNYXBQYW46IGJvb2xlYW4gfSB7XG4gICAgY29uc3QgcmVzdWx0ID0geyBlZGl0QWN0aW9uOiBudWxsLCBjYW5jZWxNYXBQYW46IGZhbHNlIH07XG5cbiAgICBjb25zdCBjbGlja1NlcXVlbmNlID0gdGhpcy5nZXRDbGlja1NlcXVlbmNlKCk7XG4gICAgY29uc3QgZ3JvdW5kQ29vcmRzID0gZXZlbnQuZ3JvdW5kQ29vcmRzO1xuXG4gICAgbGV0IHN0YXJ0UG9zaXRpb246ID9Qb3NpdGlvbiA9IG51bGw7XG4gICAgY29uc3Qgc2VsZWN0ZWRGZWF0dXJlSW5kZXhlcyA9IHRoaXMuZ2V0U2VsZWN0ZWRGZWF0dXJlSW5kZXhlcygpO1xuICAgIGNvbnN0IHNlbGVjdGVkR2VvbWV0cnkgPSB0aGlzLmdldFNlbGVjdGVkR2VvbWV0cnkoKTtcblxuICAgIGlmIChcbiAgICAgIHNlbGVjdGVkRmVhdHVyZUluZGV4ZXMubGVuZ3RoID4gMSB8fFxuICAgICAgKHNlbGVjdGVkR2VvbWV0cnkgJiYgc2VsZWN0ZWRHZW9tZXRyeS50eXBlICE9PSAnTGluZVN0cmluZycpXG4gICAgKSB7XG4gICAgICAvLyB1bnN1cHBvcnRlZFxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBpZiAoc2VsZWN0ZWRHZW9tZXRyeSAmJiBzZWxlY3RlZEdlb21ldHJ5LnR5cGUgPT09ICdMaW5lU3RyaW5nJykge1xuICAgICAgLy8gRHJhdyBhbiBleHRlbnNpb24gbGluZSBzdGFydGluZyBmcm9tIG9uZSBlbmQgb2YgdGhlIHNlbGVjdGVkIExpbmVTdHJpbmdcbiAgICAgIHN0YXJ0UG9zaXRpb24gPSBzZWxlY3RlZEdlb21ldHJ5LmNvb3JkaW5hdGVzW3NlbGVjdGVkR2VvbWV0cnkuY29vcmRpbmF0ZXMubGVuZ3RoIC0gMV07XG5cbiAgICAgIGNvbnN0IG1vZGVDb25maWcgPSB0aGlzLmdldE1vZGVDb25maWcoKTtcbiAgICAgIGlmIChtb2RlQ29uZmlnICYmIG1vZGVDb25maWcuZHJhd0F0RnJvbnQpIHtcbiAgICAgICAgc3RhcnRQb3NpdGlvbiA9IHNlbGVjdGVkR2VvbWV0cnkuY29vcmRpbmF0ZXNbMF07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjbGlja1NlcXVlbmNlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgc3RhcnRQb3NpdGlvbiA9IGNsaWNrU2VxdWVuY2VbMF07XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0UG9zaXRpb24pIHtcbiAgICAgIHRoaXMuX3NldFRlbnRhdGl2ZUZlYXR1cmUoe1xuICAgICAgICB0eXBlOiAnRmVhdHVyZScsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBnZW9tZXRyeToge1xuICAgICAgICAgIHR5cGU6ICdMaW5lU3RyaW5nJyxcbiAgICAgICAgICBjb29yZGluYXRlczogW3N0YXJ0UG9zaXRpb24sIGdyb3VuZENvb3Jkc11cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuIl19