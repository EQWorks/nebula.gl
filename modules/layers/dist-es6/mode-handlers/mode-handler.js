"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPickedEditHandle = getPickedEditHandle;
exports.getIntermediatePosition = getIntermediatePosition;
exports.getEditHandlesForGeometry = getEditHandlesForGeometry;
exports.ModeHandler = void 0;

var _union = _interopRequireDefault(require("@turf/union"));

var _difference = _interopRequireDefault(require("@turf/difference"));

var _intersect = _interopRequireDefault(require("@turf/intersect"));

var _keplerOutdatedNebula = require("kepler-outdated-nebula.gl-edit-modes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ModeHandler {
  // TODO: add underscore
  constructor(featureCollection) {
    _defineProperty(this, "featureCollection", void 0);

    _defineProperty(this, "_tentativeFeature", void 0);

    _defineProperty(this, "_modeConfig", null);

    _defineProperty(this, "_selectedFeatureIndexes", []);

    _defineProperty(this, "_clickSequence", []);

    if (featureCollection) {
      this.setFeatureCollection(featureCollection);
    }
  }

  getFeatureCollection() {
    return this.featureCollection.getObject();
  }

  getImmutableFeatureCollection() {
    return this.featureCollection;
  }

  getSelectedFeature() {
    if (this._selectedFeatureIndexes.length === 1) {
      return this.featureCollection.getObject().features[this._selectedFeatureIndexes[0]];
    }

    return null;
  }

  getSelectedGeometry() {
    var feature = this.getSelectedFeature();

    if (feature) {
      return feature.geometry;
    }

    return null;
  }

  getSelectedFeaturesAsFeatureCollection() {
    var _this$featureCollecti = this.featureCollection.getObject(),
        features = _this$featureCollecti.features;

    var selectedFeatures = this.getSelectedFeatureIndexes().map(function (selectedIndex) {
      return features[selectedIndex];
    });
    return {
      type: 'FeatureCollection',
      features: selectedFeatures
    };
  }

  setFeatureCollection(featureCollection) {
    this.featureCollection = new _keplerOutdatedNebula.ImmutableFeatureCollection(featureCollection);
  }

  getModeConfig() {
    return this._modeConfig;
  }

  setModeConfig(modeConfig) {
    if (this._modeConfig === modeConfig) {
      return;
    }

    this._modeConfig = modeConfig;

    this._setTentativeFeature(null);
  }

  getSelectedFeatureIndexes() {
    return this._selectedFeatureIndexes;
  }

  setSelectedFeatureIndexes(indexes) {
    if (this._selectedFeatureIndexes === indexes) {
      return;
    }

    this._selectedFeatureIndexes = indexes;

    this._setTentativeFeature(null);
  }

  getClickSequence() {
    return this._clickSequence;
  }

  resetClickSequence() {
    this._clickSequence = [];
  }

  getTentativeFeature() {
    return this._tentativeFeature;
  } // TODO: remove the underscore


  _setTentativeFeature(tentativeFeature) {
    this._tentativeFeature = tentativeFeature;

    if (!tentativeFeature) {
      // Reset the click sequence
      this._clickSequence = [];
    }
  }
  /**
   * Returns a flat array of positions for the given feature along with their indexes into the feature's geometry's coordinates.
   *
   * @param featureIndex The index of the feature to get edit handles
   */


  getEditHandles(picks, groundCoords) {
    return [];
  }

  getCursor(_ref) {
    var isDragging = _ref.isDragging;
    return 'cell';
  }

  isSelectionPicked(picks) {
    if (!picks.length) return false;
    var pickedIndexes = picks.map(function (_ref2) {
      var index = _ref2.index;
      return index;
    });
    var selectedFeatureIndexes = this.getSelectedFeatureIndexes();
    return selectedFeatureIndexes.some(function (index) {
      return pickedIndexes.includes(index);
    });
  }

  getAddFeatureAction(geometry) {
    // Unsure why flow can't deal with Geometry type, but there I fixed it
    var geometryAsAny = geometry;
    var updatedData = this.getImmutableFeatureCollection().addFeature({
      type: 'Feature',
      properties: {},
      geometry: geometryAsAny
    }).getObject();
    return {
      updatedData: updatedData,
      editType: 'addFeature',
      featureIndexes: [updatedData.features.length - 1],
      editContext: {
        featureIndexes: [updatedData.features.length - 1]
      }
    };
  }

  getAddManyFeaturesAction(featureCollection) {
    var features = featureCollection.features;
    var updatedData = this.getImmutableFeatureCollection();
    var initialIndex = updatedData.getObject().features.length;
    var updatedIndexes = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = features[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var feature = _step.value;
        var properties = feature.properties,
            geometry = feature.geometry;
        var geometryAsAny = geometry;
        updatedData = updatedData.addFeature({
          type: 'Feature',
          properties: properties,
          geometry: geometryAsAny
        });
        updatedIndexes.push(initialIndex + updatedIndexes.length);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return {
      updatedData: updatedData.getObject(),
      editType: 'addFeature',
      featureIndexes: updatedIndexes,
      editContext: {
        featureIndexes: updatedIndexes
      }
    };
  }

  getAddFeatureOrBooleanPolygonAction(geometry) {
    var selectedFeature = this.getSelectedFeature();
    var modeConfig = this.getModeConfig();

    if (modeConfig && modeConfig.booleanOperation) {
      if (!selectedFeature || selectedFeature.geometry.type !== 'Polygon' && selectedFeature.geometry.type !== 'MultiPolygon') {
        // eslint-disable-next-line no-console,no-undef
        console.warn('booleanOperation only supported for single Polygon or MultiPolygon selection');
        return null;
      }

      var feature = {
        type: 'Feature',
        geometry: geometry
      };
      var updatedGeometry;

      if (modeConfig.booleanOperation === 'union') {
        updatedGeometry = (0, _union.default)(selectedFeature, feature);
      } else if (modeConfig.booleanOperation === 'difference') {
        updatedGeometry = (0, _difference.default)(selectedFeature, feature);
      } else if (modeConfig.booleanOperation === 'intersection') {
        updatedGeometry = (0, _intersect.default)(selectedFeature, feature);
      } else {
        // eslint-disable-next-line no-console,no-undef
        console.warn("Invalid booleanOperation ".concat(modeConfig.booleanOperation));
        return null;
      }

      if (!updatedGeometry) {
        // eslint-disable-next-line no-console,no-undef
        console.warn('Canceling edit. Boolean operation erased entire polygon.');
        return null;
      }

      var featureIndex = this.getSelectedFeatureIndexes()[0];
      var updatedData = this.getImmutableFeatureCollection().replaceGeometry(featureIndex, updatedGeometry.geometry).getObject();
      var editAction = {
        updatedData: updatedData,
        editType: 'unionGeometry',
        featureIndexes: [featureIndex],
        editContext: {
          featureIndexes: [featureIndex]
        }
      };
      return editAction;
    }

    return this.getAddFeatureAction(geometry);
  }

  handleClick(event) {
    this._clickSequence.push(event.groundCoords);

    return null;
  }

  handlePointerMove(event) {
    return {
      editAction: null,
      cancelMapPan: false
    };
  }

  handleStartDragging(event) {
    return null;
  }

  handleStopDragging(event) {
    return null;
  }

}

exports.ModeHandler = ModeHandler;

function getPickedEditHandle(picks) {
  var info = picks && picks.find(function (pick) {
    return pick.isEditingHandle;
  });

  if (info) {
    return info.object;
  }

  return null;
}

function getIntermediatePosition(position1, position2) {
  var intermediatePosition = [(position1[0] + position2[0]) / 2.0, (position1[1] + position2[1]) / 2.0];
  return intermediatePosition;
}

function getEditHandlesForGeometry(geometry, featureIndex) {
  var editHandleType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'existing';
  var handles = [];

  switch (geometry.type) {
    case 'Point':
      // positions are not nested
      handles = [{
        position: geometry.coordinates,
        positionIndexes: [],
        featureIndex: featureIndex,
        type: editHandleType
      }];
      break;

    case 'MultiPoint':
    case 'LineString':
      // positions are nested 1 level
      handles = handles.concat(getEditHandlesForCoordinates(geometry.coordinates, [], featureIndex, editHandleType));
      break;

    case 'Polygon':
    case 'MultiLineString':
      // positions are nested 2 levels
      for (var a = 0; a < geometry.coordinates.length; a++) {
        handles = handles.concat(getEditHandlesForCoordinates(geometry.coordinates[a], [a], featureIndex, editHandleType));

        if (geometry.type === 'Polygon') {
          // Don't repeat the first/last handle for Polygons
          handles = handles.slice(0, -1);
        }
      }

      break;

    case 'MultiPolygon':
      // positions are nested 3 levels
      for (var _a = 0; _a < geometry.coordinates.length; _a++) {
        for (var b = 0; b < geometry.coordinates[_a].length; b++) {
          handles = handles.concat(getEditHandlesForCoordinates(geometry.coordinates[_a][b], [_a, b], featureIndex, editHandleType)); // Don't repeat the first/last handle for Polygons

          handles = handles.slice(0, -1);
        }
      }

      break;

    default:
      throw Error("Unhandled geometry type: ".concat(geometry.type));
  }

  return handles;
}

function getEditHandlesForCoordinates(coordinates, positionIndexPrefix, featureIndex) {
  var editHandleType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'existing';
  var editHandles = [];

  for (var i = 0; i < coordinates.length; i++) {
    var position = coordinates[i];
    editHandles.push({
      position: position,
      positionIndexes: _toConsumableArray(positionIndexPrefix).concat([i]),
      featureIndex: featureIndex,
      type: editHandleType
    });
  }

  return editHandles;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,