"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _keplerOutdatedDeck = require("kepler-outdated-deck.gl-layers");

var _keplerOutdatedLuma = _interopRequireDefault(require("kepler-outdated-luma.gl-constants"));

var _keplerOutdatedLuma2 = require("kepler-outdated-luma.gl-core");

var _outline = _interopRequireDefault(require("../../shaderlib/outline/outline"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO - this should be built into assembleShaders
function injectShaderCode(_ref) {
  var source = _ref.source,
      _ref$code = _ref.code,
      code = _ref$code === void 0 ? '' : _ref$code;
  var INJECT_CODE = /}[^{}]*$/;
  return source.replace(INJECT_CODE, code.concat('\n}\n'));
}

var VS_CODE = "  outline_setUV(gl_Position);\n  outline_setZLevel(instanceZLevel);\n";
var FS_CODE = "  gl_FragColor = outline_filterColor(gl_FragColor);\n";
var defaultProps = {
  getZLevel: {
    type: 'accessor',
    value: 0
  }
};

class PathOutlineLayer extends _keplerOutdatedDeck.PathLayer {
  // Override getShaders to inject the outline module
  getShaders() {
    var shaders = super.getShaders();
    return Object.assign({}, shaders, {
      modules: shaders.modules.concat([_outline.default]),
      vs: injectShaderCode({
        source: shaders.vs,
        code: VS_CODE
      }),
      fs: injectShaderCode({
        source: shaders.fs,
        code: FS_CODE
      })
    });
  }

  initializeState(context) {
    super.initializeState(context); // Create an outline "shadow" map
    // TODO - we should create a single outlineMap for all layers

    this.setState({
      outlineFramebuffer: new _keplerOutdatedLuma2.Framebuffer(context.gl),
      dummyTexture: new _keplerOutdatedLuma2.Texture2D(context.gl)
    }); // Create an attribute manager

    this.state.attributeManager.addInstanced({
      instanceZLevel: {
        size: 1,
        type: _keplerOutdatedLuma.default.UNSIGNED_BYTE,
        update: this.calculateZLevels,
        accessor: 'getZLevel'
      }
    });
  } // Override draw to add render module


  draw(_ref2) {
    var _ref2$moduleParameter = _ref2.moduleParameters,
        moduleParameters = _ref2$moduleParameter === void 0 ? {} : _ref2$moduleParameter,
        parameters = _ref2.parameters,
        uniforms = _ref2.uniforms,
        context = _ref2.context;
    // Need to calculate same uniforms as base layer
    var _this$props = this.props,
        rounded = _this$props.rounded,
        miterLimit = _this$props.miterLimit,
        widthScale = _this$props.widthScale,
        widthMinPixels = _this$props.widthMinPixels,
        widthMaxPixels = _this$props.widthMaxPixels,
        dashJustified = _this$props.dashJustified;
    uniforms = Object.assign({}, uniforms, {
      jointType: Number(rounded),
      alignMode: Number(dashJustified),
      widthScale: widthScale,
      miterLimit: miterLimit,
      widthMinPixels: widthMinPixels,
      widthMaxPixels: widthMaxPixels
    }); // Render the outline shadowmap (based on segment z orders)

    var _this$state = this.state,
        outlineFramebuffer = _this$state.outlineFramebuffer,
        dummyTexture = _this$state.dummyTexture;
    outlineFramebuffer.resize();
    outlineFramebuffer.clear({
      color: true,
      depth: true
    });
    this.state.model.updateModuleSettings({
      outlineEnabled: true,
      outlineRenderShadowmap: true,
      outlineShadowmap: dummyTexture
    });
    this.state.model.draw({
      uniforms: Object.assign({}, uniforms, {
        jointType: 0,
        widthScale: this.props.widthScale * 1.3
      }),
      parameters: {
        depthTest: false,
        // Biggest value needs to go into buffer
        blendEquation: _keplerOutdatedLuma.default.MAX
      },
      framebuffer: outlineFramebuffer
    }); // Now use the outline shadowmap to render the lines (with outlines)

    this.state.model.updateModuleSettings({
      outlineEnabled: true,
      outlineRenderShadowmap: false,
      outlineShadowmap: outlineFramebuffer
    });
    this.state.model.draw({
      uniforms: Object.assign({}, uniforms, {
        jointType: Number(rounded),
        widthScale: this.props.widthScale
      }),
      parameters: {
        depthTest: false
      }
    });
  }

  calculateZLevels(attribute) {
    var getZLevel = this.props.getZLevel;
    var pathTesselator = this.state.pathTesselator;
    attribute.value = pathTesselator._updateAttribute({
      target: attribute.value,
      size: 1,
      getValue: function getValue(object, index) {
        return [getZLevel(object, index) || 0];
      }
    });
  }

}

exports.default = PathOutlineLayer;
PathOutlineLayer.layerName = 'PathOutlineLayer';
PathOutlineLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,