"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _keplerOutdatedLuma = require("kepler-outdated-luma.gl-core");

class Arrow2DGeometry extends _keplerOutdatedLuma.Geometry {
  constructor() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super(Object.assign({}, opts, {
      attributes: getArrowAttributes(opts)
    }));
  }

}

exports.default = Arrow2DGeometry;

function getArrowAttributes(_ref) {
  var _ref$length = _ref.length,
      length = _ref$length === void 0 ? 1 : _ref$length,
      _ref$headSize = _ref.headSize,
      headSize = _ref$headSize === void 0 ? 0.2 : _ref$headSize,
      _ref$tailWidth = _ref.tailWidth,
      tailWidth = _ref$tailWidth === void 0 ? 0.05 : _ref$tailWidth,
      _ref$tailStart = _ref.tailStart,
      tailStart = _ref$tailStart === void 0 ? 0.05 : _ref$tailStart;
  var texCoords = [// HEAD
  0.5, 1.0, 0, 0.5 - headSize / 2, 1.0 - headSize, 0, 0.5 + headSize / 2, 1.0 - headSize, 0, 0.5 - tailWidth / 2, tailStart, 0, 0.5 + tailWidth / 2, 1.0 - headSize, 0, 0.5 + tailWidth / 2, tailStart, 0, 0.5 - tailWidth / 2, tailStart, 0, 0.5 - tailWidth / 2, 1.0 - headSize, 0, 0.5 + tailWidth / 2, 1.0 - headSize, 0];
  var normals = [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]; // Center and scale

  var positions = new Array(texCoords.length);

  for (var i = 0; i < texCoords.length / 3; i++) {
    var i3 = i * 3;
    positions[i3 + 0] = (texCoords[i3 + 0] - 0.5) * length;
    positions[i3 + 1] = (texCoords[i3 + 1] - 0.5) * length;
    positions[i3 + 2] = 0;
  }

  return {
    positions: new Float32Array(positions),
    normals: new Float32Array(normals),
    texCoords: new Float32Array(texCoords)
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYXllcnMvcGF0aC1tYXJrZXItbGF5ZXIvYXJyb3ctMmQtZ2VvbWV0cnkuanMiXSwibmFtZXMiOlsiQXJyb3cyREdlb21ldHJ5IiwiR2VvbWV0cnkiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJPYmplY3QiLCJhc3NpZ24iLCJhdHRyaWJ1dGVzIiwiZ2V0QXJyb3dBdHRyaWJ1dGVzIiwibGVuZ3RoIiwiaGVhZFNpemUiLCJ0YWlsV2lkdGgiLCJ0YWlsU3RhcnQiLCJ0ZXhDb29yZHMiLCJub3JtYWxzIiwicG9zaXRpb25zIiwiQXJyYXkiLCJpIiwiaTMiLCJGbG9hdDMyQXJyYXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFZSxNQUFNQSxlQUFOLFNBQThCQyw0QkFBOUIsQ0FBdUM7QUFDcERDLEVBQUFBLFdBQVcsR0FBWTtBQUFBLFFBQVhDLElBQVcsdUVBQUosRUFBSTtBQUNyQixVQUNFQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCRixJQUFsQixFQUF3QjtBQUN0QkcsTUFBQUEsVUFBVSxFQUFFQyxrQkFBa0IsQ0FBQ0osSUFBRDtBQURSLEtBQXhCLENBREY7QUFLRDs7QUFQbUQ7Ozs7QUFVdEQsU0FBU0ksa0JBQVQsT0FBZ0c7QUFBQSx5QkFBbEVDLE1BQWtFO0FBQUEsTUFBbEVBLE1BQWtFLDRCQUF6RCxDQUF5RDtBQUFBLDJCQUF0REMsUUFBc0Q7QUFBQSxNQUF0REEsUUFBc0QsOEJBQTNDLEdBQTJDO0FBQUEsNEJBQXRDQyxTQUFzQztBQUFBLE1BQXRDQSxTQUFzQywrQkFBMUIsSUFBMEI7QUFBQSw0QkFBcEJDLFNBQW9CO0FBQUEsTUFBcEJBLFNBQW9CLCtCQUFSLElBQVE7QUFDOUYsTUFBTUMsU0FBUyxHQUFHLENBQ2hCO0FBQ0EsS0FGZ0IsRUFHaEIsR0FIZ0IsRUFJaEIsQ0FKZ0IsRUFLaEIsTUFBTUgsUUFBUSxHQUFHLENBTEQsRUFNaEIsTUFBTUEsUUFOVSxFQU9oQixDQVBnQixFQVFoQixNQUFNQSxRQUFRLEdBQUcsQ0FSRCxFQVNoQixNQUFNQSxRQVRVLEVBVWhCLENBVmdCLEVBWWhCLE1BQU1DLFNBQVMsR0FBRyxDQVpGLEVBYWhCQyxTQWJnQixFQWNoQixDQWRnQixFQWVoQixNQUFNRCxTQUFTLEdBQUcsQ0FmRixFQWdCaEIsTUFBTUQsUUFoQlUsRUFpQmhCLENBakJnQixFQWtCaEIsTUFBTUMsU0FBUyxHQUFHLENBbEJGLEVBbUJoQkMsU0FuQmdCLEVBb0JoQixDQXBCZ0IsRUFzQmhCLE1BQU1ELFNBQVMsR0FBRyxDQXRCRixFQXVCaEJDLFNBdkJnQixFQXdCaEIsQ0F4QmdCLEVBeUJoQixNQUFNRCxTQUFTLEdBQUcsQ0F6QkYsRUEwQmhCLE1BQU1ELFFBMUJVLEVBMkJoQixDQTNCZ0IsRUE0QmhCLE1BQU1DLFNBQVMsR0FBRyxDQTVCRixFQTZCaEIsTUFBTUQsUUE3QlUsRUE4QmhCLENBOUJnQixDQUFsQjtBQWlDQSxNQUFNSSxPQUFPLEdBQUcsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLEVBQWEsQ0FBYixFQUFnQixDQUFoQixFQUFtQixDQUFuQixFQUFzQixDQUF0QixFQUF5QixDQUF6QixFQUE0QixDQUE1QixFQUErQixDQUEvQixFQUFrQyxDQUFsQyxFQUFxQyxDQUFyQyxFQUF3QyxDQUF4QyxFQUEyQyxDQUEzQyxFQUE4QyxDQUE5QyxFQUFpRCxDQUFqRCxFQUFvRCxDQUFwRCxFQUF1RCxDQUF2RCxFQUEwRCxDQUExRCxFQUE2RCxDQUE3RCxFQUFnRSxDQUFoRSxFQUFtRSxDQUFuRSxFQUFzRSxDQUF0RSxFQUF5RSxDQUF6RSxFQUE0RSxDQUE1RSxFQUErRSxDQUEvRSxDQUFoQixDQWxDOEYsQ0FvQzlGOztBQUNBLE1BQU1DLFNBQVMsR0FBRyxJQUFJQyxLQUFKLENBQVVILFNBQVMsQ0FBQ0osTUFBcEIsQ0FBbEI7O0FBQ0EsT0FBSyxJQUFJUSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSixTQUFTLENBQUNKLE1BQVYsR0FBbUIsQ0FBdkMsRUFBMENRLENBQUMsRUFBM0MsRUFBK0M7QUFDN0MsUUFBTUMsRUFBRSxHQUFHRCxDQUFDLEdBQUcsQ0FBZjtBQUNBRixJQUFBQSxTQUFTLENBQUNHLEVBQUUsR0FBRyxDQUFOLENBQVQsR0FBb0IsQ0FBQ0wsU0FBUyxDQUFDSyxFQUFFLEdBQUcsQ0FBTixDQUFULEdBQW9CLEdBQXJCLElBQTRCVCxNQUFoRDtBQUNBTSxJQUFBQSxTQUFTLENBQUNHLEVBQUUsR0FBRyxDQUFOLENBQVQsR0FBb0IsQ0FBQ0wsU0FBUyxDQUFDSyxFQUFFLEdBQUcsQ0FBTixDQUFULEdBQW9CLEdBQXJCLElBQTRCVCxNQUFoRDtBQUNBTSxJQUFBQSxTQUFTLENBQUNHLEVBQUUsR0FBRyxDQUFOLENBQVQsR0FBb0IsQ0FBcEI7QUFDRDs7QUFDRCxTQUFPO0FBQ0xILElBQUFBLFNBQVMsRUFBRSxJQUFJSSxZQUFKLENBQWlCSixTQUFqQixDQUROO0FBRUxELElBQUFBLE9BQU8sRUFBRSxJQUFJSyxZQUFKLENBQWlCTCxPQUFqQixDQUZKO0FBR0xELElBQUFBLFNBQVMsRUFBRSxJQUFJTSxZQUFKLENBQWlCTixTQUFqQjtBQUhOLEdBQVA7QUFLRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdlb21ldHJ5IH0gZnJvbSAna2VwbGVyLW91dGRhdGVkLWx1bWEuZ2wtY29yZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFycm93MkRHZW9tZXRyeSBleHRlbmRzIEdlb21ldHJ5IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIoXG4gICAgICBPYmplY3QuYXNzaWduKHt9LCBvcHRzLCB7XG4gICAgICAgIGF0dHJpYnV0ZXM6IGdldEFycm93QXR0cmlidXRlcyhvcHRzKVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEFycm93QXR0cmlidXRlcyh7IGxlbmd0aCA9IDEsIGhlYWRTaXplID0gMC4yLCB0YWlsV2lkdGggPSAwLjA1LCB0YWlsU3RhcnQgPSAwLjA1IH0pIHtcbiAgY29uc3QgdGV4Q29vcmRzID0gW1xuICAgIC8vIEhFQURcbiAgICAwLjUsXG4gICAgMS4wLFxuICAgIDAsXG4gICAgMC41IC0gaGVhZFNpemUgLyAyLFxuICAgIDEuMCAtIGhlYWRTaXplLFxuICAgIDAsXG4gICAgMC41ICsgaGVhZFNpemUgLyAyLFxuICAgIDEuMCAtIGhlYWRTaXplLFxuICAgIDAsXG5cbiAgICAwLjUgLSB0YWlsV2lkdGggLyAyLFxuICAgIHRhaWxTdGFydCxcbiAgICAwLFxuICAgIDAuNSArIHRhaWxXaWR0aCAvIDIsXG4gICAgMS4wIC0gaGVhZFNpemUsXG4gICAgMCxcbiAgICAwLjUgKyB0YWlsV2lkdGggLyAyLFxuICAgIHRhaWxTdGFydCxcbiAgICAwLFxuXG4gICAgMC41IC0gdGFpbFdpZHRoIC8gMixcbiAgICB0YWlsU3RhcnQsXG4gICAgMCxcbiAgICAwLjUgLSB0YWlsV2lkdGggLyAyLFxuICAgIDEuMCAtIGhlYWRTaXplLFxuICAgIDAsXG4gICAgMC41ICsgdGFpbFdpZHRoIC8gMixcbiAgICAxLjAgLSBoZWFkU2l6ZSxcbiAgICAwXG4gIF07XG5cbiAgY29uc3Qgbm9ybWFscyA9IFswLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxLCAwLCAwLCAxXTtcblxuICAvLyBDZW50ZXIgYW5kIHNjYWxlXG4gIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBBcnJheSh0ZXhDb29yZHMubGVuZ3RoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXhDb29yZHMubGVuZ3RoIC8gMzsgaSsrKSB7XG4gICAgY29uc3QgaTMgPSBpICogMztcbiAgICBwb3NpdGlvbnNbaTMgKyAwXSA9ICh0ZXhDb29yZHNbaTMgKyAwXSAtIDAuNSkgKiBsZW5ndGg7XG4gICAgcG9zaXRpb25zW2kzICsgMV0gPSAodGV4Q29vcmRzW2kzICsgMV0gLSAwLjUpICogbGVuZ3RoO1xuICAgIHBvc2l0aW9uc1tpMyArIDJdID0gMDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHBvc2l0aW9uczogbmV3IEZsb2F0MzJBcnJheShwb3NpdGlvbnMpLFxuICAgIG5vcm1hbHM6IG5ldyBGbG9hdDMyQXJyYXkobm9ybWFscyksXG4gICAgdGV4Q29vcmRzOiBuZXcgRmxvYXQzMkFycmF5KHRleENvb3JkcylcbiAgfTtcbn1cbiJdfQ==