"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _keplerOutdatedDeck = require("kepler-outdated-deck.gl-layers");

var _keplerOutdatedNebula = require("kepler-outdated-nebula.gl-edit-modes");

var _editableLayerEditModePoc = _interopRequireDefault(require("./editable-layer-edit-mode-poc.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-env browser */
var DEFAULT_LINE_COLOR = [0x0, 0x0, 0x0, 0xff];
var DEFAULT_FILL_COLOR = [0x0, 0x0, 0x0, 0x90];
var DEFAULT_SELECTED_LINE_COLOR = [0x90, 0x90, 0x90, 0xff];
var DEFAULT_SELECTED_FILL_COLOR = [0x90, 0x90, 0x90, 0x90];
var DEFAULT_EDITING_EXISTING_POINT_COLOR = [0xc0, 0x0, 0x0, 0xff];
var DEFAULT_EDITING_INTERMEDIATE_POINT_COLOR = [0x0, 0x0, 0x0, 0x80];
var DEFAULT_EDITING_SNAP_POINT_COLOR = [0x7c, 0x00, 0xc0, 0xff];
var DEFAULT_EDITING_EXISTING_POINT_RADIUS = 5;
var DEFAULT_EDITING_INTERMEDIATE_POINT_RADIUS = 3;
var DEFAULT_EDITING_SNAP_POINT_RADIUS = 7;
var DEFAULT_EDIT_MODE = new _keplerOutdatedNebula.ViewMode();

function getEditHandleColor(handle) {
  switch (handle.sourceFeature.feature.properties.editHandleType) {
    case 'existing':
      return DEFAULT_EDITING_EXISTING_POINT_COLOR;

    case 'snap':
      return DEFAULT_EDITING_SNAP_POINT_COLOR;

    case 'intermediate':
    default:
      return DEFAULT_EDITING_INTERMEDIATE_POINT_COLOR;
  }
}

function getEditHandleRadius(handle) {
  switch (handle.sourceFeature.feature.properties.editHandleType) {
    case 'existing':
      return DEFAULT_EDITING_EXISTING_POINT_RADIUS;

    case 'snap':
      return DEFAULT_EDITING_SNAP_POINT_RADIUS;

    case 'intermediate':
    default:
      return DEFAULT_EDITING_INTERMEDIATE_POINT_RADIUS;
  }
}

var defaultProps = {
  mode: 'modify',
  // Edit and interaction events
  onEdit: function onEdit() {},
  pickable: true,
  pickingRadius: 10,
  pickingDepth: 5,
  fp64: false,
  filled: true,
  stroked: true,
  lineWidthScale: 1,
  lineWidthMinPixels: 1,
  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,
  lineWidthUnits: 'meters',
  lineJointRounded: false,
  lineMiterLimit: 4,
  pointRadiusScale: 1,
  pointRadiusMinPixels: 2,
  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER,
  lineDashJustified: false,
  getLineColor: function getLineColor(feature, isSelected, mode) {
    return isSelected ? DEFAULT_SELECTED_LINE_COLOR : DEFAULT_LINE_COLOR;
  },
  getFillColor: function getFillColor(feature, isSelected, mode) {
    return isSelected ? DEFAULT_SELECTED_FILL_COLOR : DEFAULT_FILL_COLOR;
  },
  getRadius: function getRadius(f) {
    return f && f.properties && f.properties.radius || f && f.properties && f.properties.size || 1;
  },
  getLineWidth: function getLineWidth(f) {
    return f && f.properties && f.properties.lineWidth || 1;
  },
  getLineDashArray: function getLineDashArray(feature, isSelected, mode) {
    return isSelected && mode !== 'view' ? [7, 4] : [0, 0];
  },
  // Tentative feature rendering
  getTentativeLineDashArray: function getTentativeLineDashArray(f, mode) {
    return [7, 4];
  },
  getTentativeLineColor: function getTentativeLineColor(f, mode) {
    return DEFAULT_SELECTED_LINE_COLOR;
  },
  getTentativeFillColor: function getTentativeFillColor(f, mode) {
    return DEFAULT_SELECTED_FILL_COLOR;
  },
  getTentativeLineWidth: function getTentativeLineWidth(f, mode) {
    return f && f.properties && f.properties.lineWidth || 1;
  },
  editHandleType: 'point',
  // point handles
  editHandlePointRadiusScale: 1,
  editHandlePointOutline: false,
  editHandlePointStrokeWidth: 1,
  editHandlePointRadiusMinPixels: 4,
  editHandlePointRadiusMaxPixels: 8,
  getEditHandlePointColor: getEditHandleColor,
  getEditHandlePointRadius: getEditHandleRadius,
  // icon handles
  editHandleIconAtlas: null,
  editHandleIconMapping: null,
  editHandleIconSizeScale: 1,
  getEditHandleIcon: function getEditHandleIcon(handle) {
    return handle.sourceFeature.feature.properties.editHandleType;
  },
  getEditHandleIconSize: 10,
  getEditHandleIconColor: getEditHandleColor,
  getEditHandleIconAngle: 0,
  // misc
  billboard: true,
  // Mode handlers
  modeHandlers: {
    view: new _keplerOutdatedNebula.ViewMode(),
    // Alter modes
    modify: new _keplerOutdatedNebula.ModifyMode(),
    translate: new _keplerOutdatedNebula.SnappableMode(new _keplerOutdatedNebula.TranslateMode()),
    scale: new _keplerOutdatedNebula.ScaleMode(),
    rotate: new _keplerOutdatedNebula.RotateMode(),
    duplicate: new _keplerOutdatedNebula.DuplicateMode(),
    split: new _keplerOutdatedNebula.SplitPolygonMode(),
    extrude: new _keplerOutdatedNebula.ExtrudeMode(),
    elevation: new _keplerOutdatedNebula.ElevationMode(),
    // Draw modes
    drawPoint: new _keplerOutdatedNebula.DrawPointMode(),
    drawLineString: new _keplerOutdatedNebula.DrawLineStringMode(),
    drawPolygon: new _keplerOutdatedNebula.DrawPolygonMode(),
    drawRectangle: new _keplerOutdatedNebula.DrawRectangleMode(),
    drawCircleFromCenter: new _keplerOutdatedNebula.DrawCircleFromCenterMode(),
    drawCircleByBoundingBox: new _keplerOutdatedNebula.DrawCircleByBoundingBoxMode(),
    drawEllipseByBoundingBox: new _keplerOutdatedNebula.DrawEllipseByBoundingBoxMode(),
    drawRectangleUsing3Points: new _keplerOutdatedNebula.DrawRectangleUsingThreePointsMode(),
    drawEllipseUsing3Points: new _keplerOutdatedNebula.DrawEllipseUsingThreePointsMode(),
    draw90DegreePolygon: new _keplerOutdatedNebula.Draw90DegreePolygonMode()
  }
};

// type State = {
//   modeHandler: EditableFeatureCollection,
//   tentativeFeature: ?Feature,
//   editHandles: any[],
//   selectedFeatures: Feature[]
// };
class EditableGeoJsonLayerEditModePoc extends _editableLayerEditModePoc.default {
  // state: State;
  // props: Props;
  // setState: ($Shape<State>) => void;
  renderLayers() {
    var subLayerProps = this.getSubLayerProps({
      id: 'geojson',
      // Proxy most GeoJsonLayer props as-is
      data: this.props.data,
      fp64: this.props.fp64,
      filled: this.props.filled,
      stroked: this.props.stroked,
      lineWidthScale: this.props.lineWidthScale,
      lineWidthMinPixels: this.props.lineWidthMinPixels,
      lineWidthMaxPixels: this.props.lineWidthMaxPixels,
      lineWidthUnits: this.props.lineWidthUnits,
      lineJointRounded: this.props.lineJointRounded,
      lineMiterLimit: this.props.lineMiterLimit,
      pointRadiusScale: this.props.pointRadiusScale,
      pointRadiusMinPixels: this.props.pointRadiusMinPixels,
      pointRadiusMaxPixels: this.props.pointRadiusMaxPixels,
      lineDashJustified: this.props.lineDashJustified,
      getLineColor: this.selectionAwareAccessor(this.props.getLineColor),
      getFillColor: this.selectionAwareAccessor(this.props.getFillColor),
      getRadius: this.selectionAwareAccessor(this.props.getRadius),
      getLineWidth: this.selectionAwareAccessor(this.props.getLineWidth),
      getLineDashArray: this.selectionAwareAccessor(this.props.getLineDashArray),
      _subLayerProps: {
        'line-strings': {
          billboard: this.props.billboard
        },
        'polygons-stroke': {
          billboard: this.props.billboard
        }
      },
      updateTriggers: {
        getLineColor: [this.props.selectedFeatureIndexes, this.props.mode],
        getFillColor: [this.props.selectedFeatureIndexes, this.props.mode],
        getRadius: [this.props.selectedFeatureIndexes, this.props.mode],
        getLineWidth: [this.props.selectedFeatureIndexes, this.props.mode],
        getLineDashArray: [this.props.selectedFeatureIndexes, this.props.mode]
      }
    });
    var layers = [new _keplerOutdatedDeck.GeoJsonLayer(subLayerProps)];
    layers = layers.concat(this.createGuidesLayers());
    return layers;
  }

  initializeState() {
    super.initializeState();
    this.setState({
      selectedFeatures: [],
      editHandles: []
    });
  } // TODO: is this the best way to properly update state from an outside event handler?


  shouldUpdateState(opts) {
    // console.log(
    //   'shouldUpdateState',
    //   opts.changeFlags.propsOrDataChanged,
    //   opts.changeFlags.stateChanged
    // );
    return super.shouldUpdateState(opts) || opts.changeFlags.stateChanged;
  }

  updateState(_ref) {
    var props = _ref.props,
        oldProps = _ref.oldProps,
        changeFlags = _ref.changeFlags;
    super.updateState({
      props: props,
      changeFlags: changeFlags
    });
    var modeHandler = this.state.modeHandler;

    if (changeFlags.propsOrDataChanged) {
      if (props.modeHandlers !== oldProps.modeHandlers || props.mode !== oldProps.mode) {
        modeHandler = props.modeHandlers[props.mode];

        if (!modeHandler) {
          console.warn("No handler configured for mode ".concat(props.mode)); // eslint-disable-line no-console,no-undef
          // Use default mode handler

          modeHandler = DEFAULT_EDIT_MODE;
        }

        if (modeHandler !== this.state.modeHandler) {
          this.setState({
            modeHandler: modeHandler,
            cursor: null
          });
        }
      }
    }

    var selectedFeatures = [];

    if (Array.isArray(props.selectedFeatureIndexes)) {
      // TODO: needs improved testing, i.e. checking for duplicates, NaNs, out of range numbers, ...
      selectedFeatures = props.selectedFeatureIndexes.map(function (elem) {
        return props.data.features[elem];
      });
    }

    this.setState({
      selectedFeatures: selectedFeatures
    });
  }

  getModeProps(props) {
    var _this = this;

    return {
      modeConfig: props.modeConfig,
      data: props.data,
      selectedIndexes: props.selectedFeatureIndexes,
      lastPointerMoveEvent: this.state.lastPointerMoveEvent,
      cursor: this.state.cursor,
      onEdit: function onEdit(editAction) {
        props.onEdit(editAction);
      },
      onUpdateCursor: function onUpdateCursor(cursor) {
        _this.setState({
          cursor: cursor
        });
      }
    };
  }

  selectionAwareAccessor(accessor) {
    var _this2 = this;

    if (typeof accessor !== 'function') {
      return accessor;
    }

    return function (feature) {
      return accessor(feature, _this2.isFeatureSelected(feature), _this2.props.mode);
    };
  }

  isFeatureSelected(feature) {
    if (!this.props.data || !this.props.selectedFeatureIndexes) {
      return false;
    }

    if (!this.props.selectedFeatureIndexes.length) {
      return false;
    }

    var featureIndex = this.props.data.features.indexOf(feature);
    return this.props.selectedFeatureIndexes.includes(featureIndex);
  }

  getPickingInfo(_ref2) {
    var info = _ref2.info,
        sourceLayer = _ref2.sourceLayer;

    if (sourceLayer.id.endsWith('guides')) {
      // If user is picking an editing handle, add additional data to the info
      info.isGuide = true;
    }

    return info;
  }

  createGuidesLayers() {
    var mode = this.props.modeHandlers[this.props.mode] || DEFAULT_EDIT_MODE;
    var guides = mode.getGuides(this.getModeProps(this.props));

    if (!guides || !guides.features.length) {
      return [];
    }

    var pointLayerProps;

    if (this.props.editHandleType === 'icon') {
      pointLayerProps = {
        type: _keplerOutdatedDeck.IconLayer,
        iconAtlas: this.props.editHandleIconAtlas,
        iconMapping: this.props.editHandleIconMapping,
        sizeScale: this.props.editHandleIconSizeScale,
        getIcon: this.props.getEditHandleIcon,
        getSize: this.props.getEditHandleIconSize,
        getColor: this.props.getEditHandleIconColor,
        getAngle: this.props.getEditHandleIconAngle
      };
    } else {
      pointLayerProps = {
        type: _keplerOutdatedDeck.ScatterplotLayer,
        radiusScale: this.props.editHandlePointRadiusScale,
        stroked: this.props.editHandlePointOutline,
        getLineWidth: this.props.editHandlePointStrokeWidth,
        radiusMinPixels: this.props.editHandlePointRadiusMinPixels,
        radiusMaxPixels: this.props.editHandlePointRadiusMaxPixels,
        getRadius: this.props.getEditHandlePointRadius,
        getFillColor: this.props.getEditHandlePointColor,
        getlineColor: this.props.getEditHandlePointColor
      };
    }

    var layer = new _keplerOutdatedDeck.GeoJsonLayer(this.getSubLayerProps({
      id: "guides",
      data: guides,
      fp64: this.props.fp64,
      _subLayerProps: {
        points: pointLayerProps
      },
      lineWidthScale: this.props.lineWidthScale,
      lineWidthMinPixels: this.props.lineWidthMinPixels,
      lineWidthMaxPixels: this.props.lineWidthMaxPixels,
      lineWidthUnits: this.props.lineWidthUnits,
      lineJointRounded: this.props.lineJointRounded,
      lineMiterLimit: this.props.lineMiterLimit,
      getLineColor: this.props.getTentativeLineColor,
      getLineWidth: this.props.getTentativeLineWidth,
      getFillColor: this.props.getTentativeFillColor,
      getLineDashArray: this.props.getTentativeLineDashArray
    }));
    return [layer];
  }

  onLayerClick(event) {
    this.getActiveModeHandler().handleClick(event, this.getModeProps(this.props));
  }

  onStartDragging(event) {
    this.getActiveModeHandler().handleStartDragging(event, this.getModeProps(this.props));
  }

  onStopDragging(event) {
    this.getActiveModeHandler().handleStopDragging(event, this.getModeProps(this.props));
  }

  onPointerMove(event) {
    this.setState({
      lastPointerMoveEvent: event
    });
    this.getActiveModeHandler().handlePointerMove(event, this.getModeProps(this.props));
  }

  getCursor(_ref3) {
    var isDragging = _ref3.isDragging;
    var cursor = this.state.cursor;

    if (!cursor) {
      cursor = isDragging ? 'grabbing' : 'grab';
    }

    return cursor;
  }

  getActiveModeHandler() {
    return this.state.modeHandler;
  }

}

exports.default = EditableGeoJsonLayerEditModePoc;
EditableGeoJsonLayerEditModePoc.layerName = 'EditableGeoJsonLayerEditModePoc';
EditableGeoJsonLayerEditModePoc.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,