"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class DeckCache {
  constructor(getData, convert) {
    _defineProperty(this, "objects", void 0);

    _defineProperty(this, "originals", void 0);

    _defineProperty(this, "updateTrigger", void 0);

    _defineProperty(this, "_idToPosition", void 0);

    _defineProperty(this, "_getData", void 0);

    _defineProperty(this, "_convert", void 0);

    this.objects = [];
    this.originals = [];
    this.updateTrigger = 0;
    this._idToPosition = new Map();
    this._getData = getData;
    this._convert = convert;
  }

  updateAllDeckObjects() {
    var _this = this;

    if (!this._getData || !this._convert) return;
    this.originals.length = 0;
    this.objects.length = 0;

    this._idToPosition.clear();

    this._getData().forEach(function (d) {
      _this._idToPosition.set(d.id, _this.objects.length);

      _this.originals.push(d);

      _this.objects.push(_this._convert(d));
    });

    this.triggerUpdate();
  }

  updateDeckObjectsByIds(ids) {
    var _this2 = this;

    if (!this._getData || !this._convert) return;
    ids.forEach(function (id) {
      var p = _this2._idToPosition.get(id);

      if (p !== undefined) {
        _this2.objects[p] = _this2._convert(_this2.originals[p]);
      }
    });
    this.triggerUpdate();
  }

  triggerUpdate() {
    this.updateTrigger++;
  }

  getDeckObjectById(id) {
    var p = this._idToPosition.get(id);

    return p !== undefined ? this.objects[p] : null;
  }

  getOriginalById(id) {
    var p = this._idToPosition.get(id);

    return p !== undefined ? this.originals[p] : null;
  }

}

exports.default = DeckCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvZGVjay1yZW5kZXJlci9kZWNrLWNhY2hlLmpzIl0sIm5hbWVzIjpbIkRlY2tDYWNoZSIsImNvbnN0cnVjdG9yIiwiZ2V0RGF0YSIsImNvbnZlcnQiLCJvYmplY3RzIiwib3JpZ2luYWxzIiwidXBkYXRlVHJpZ2dlciIsIl9pZFRvUG9zaXRpb24iLCJNYXAiLCJfZ2V0RGF0YSIsIl9jb252ZXJ0IiwidXBkYXRlQWxsRGVja09iamVjdHMiLCJsZW5ndGgiLCJjbGVhciIsImZvckVhY2giLCJkIiwic2V0IiwiaWQiLCJwdXNoIiwidHJpZ2dlclVwZGF0ZSIsInVwZGF0ZURlY2tPYmplY3RzQnlJZHMiLCJpZHMiLCJwIiwiZ2V0IiwidW5kZWZpbmVkIiwiZ2V0RGVja09iamVjdEJ5SWQiLCJnZXRPcmlnaW5hbEJ5SWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUVlLE1BQU1BLFNBQU4sQ0FBOEI7QUFRM0NDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUF5QkMsT0FBekIsRUFBa0Q7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFDM0QsU0FBS0MsT0FBTCxHQUFlLEVBQWY7QUFDQSxTQUFLQyxTQUFMLEdBQWlCLEVBQWpCO0FBQ0EsU0FBS0MsYUFBTCxHQUFxQixDQUFyQjtBQUVBLFNBQUtDLGFBQUwsR0FBcUIsSUFBSUMsR0FBSixFQUFyQjtBQUNBLFNBQUtDLFFBQUwsR0FBZ0JQLE9BQWhCO0FBQ0EsU0FBS1EsUUFBTCxHQUFnQlAsT0FBaEI7QUFDRDs7QUFFRFEsRUFBQUEsb0JBQW9CLEdBQUc7QUFBQTs7QUFDckIsUUFBSSxDQUFDLEtBQUtGLFFBQU4sSUFBa0IsQ0FBQyxLQUFLQyxRQUE1QixFQUFzQztBQUV0QyxTQUFLTCxTQUFMLENBQWVPLE1BQWYsR0FBd0IsQ0FBeEI7QUFDQSxTQUFLUixPQUFMLENBQWFRLE1BQWIsR0FBc0IsQ0FBdEI7O0FBQ0EsU0FBS0wsYUFBTCxDQUFtQk0sS0FBbkI7O0FBRUEsU0FBS0osUUFBTCxHQUFnQkssT0FBaEIsQ0FBd0IsVUFBQUMsQ0FBQyxFQUFJO0FBQzNCLE1BQUEsS0FBSSxDQUFDUixhQUFMLENBQW1CUyxHQUFuQixDQUF3QkQsQ0FBRCxDQUFTRSxFQUFoQyxFQUFvQyxLQUFJLENBQUNiLE9BQUwsQ0FBYVEsTUFBakQ7O0FBQ0EsTUFBQSxLQUFJLENBQUNQLFNBQUwsQ0FBZWEsSUFBZixDQUFvQkgsQ0FBcEI7O0FBQ0EsTUFBQSxLQUFJLENBQUNYLE9BQUwsQ0FBYWMsSUFBYixDQUFrQixLQUFJLENBQUNSLFFBQUwsQ0FBY0ssQ0FBZCxDQUFsQjtBQUNELEtBSkQ7O0FBTUEsU0FBS0ksYUFBTDtBQUNEOztBQUVEQyxFQUFBQSxzQkFBc0IsQ0FBQ0MsR0FBRCxFQUFnQjtBQUFBOztBQUNwQyxRQUFJLENBQUMsS0FBS1osUUFBTixJQUFrQixDQUFDLEtBQUtDLFFBQTVCLEVBQXNDO0FBRXRDVyxJQUFBQSxHQUFHLENBQUNQLE9BQUosQ0FBWSxVQUFBRyxFQUFFLEVBQUk7QUFDaEIsVUFBTUssQ0FBQyxHQUFHLE1BQUksQ0FBQ2YsYUFBTCxDQUFtQmdCLEdBQW5CLENBQXVCTixFQUF2QixDQUFWOztBQUNBLFVBQUlLLENBQUMsS0FBS0UsU0FBVixFQUFxQjtBQUNuQixRQUFBLE1BQUksQ0FBQ3BCLE9BQUwsQ0FBYWtCLENBQWIsSUFBa0IsTUFBSSxDQUFDWixRQUFMLENBQWMsTUFBSSxDQUFDTCxTQUFMLENBQWVpQixDQUFmLENBQWQsQ0FBbEI7QUFDRDtBQUNGLEtBTEQ7QUFPQSxTQUFLSCxhQUFMO0FBQ0Q7O0FBRURBLEVBQUFBLGFBQWEsR0FBRztBQUNkLFNBQUtiLGFBQUw7QUFDRDs7QUFFRG1CLEVBQUFBLGlCQUFpQixDQUFDUixFQUFELEVBQXFCO0FBQ3BDLFFBQU1LLENBQUMsR0FBRyxLQUFLZixhQUFMLENBQW1CZ0IsR0FBbkIsQ0FBdUJOLEVBQXZCLENBQVY7O0FBQ0EsV0FBT0ssQ0FBQyxLQUFLRSxTQUFOLEdBQWtCLEtBQUtwQixPQUFMLENBQWFrQixDQUFiLENBQWxCLEdBQW9DLElBQTNDO0FBQ0Q7O0FBRURJLEVBQUFBLGVBQWUsQ0FBQ1QsRUFBRCxFQUFxQjtBQUNsQyxRQUFNSyxDQUFDLEdBQUcsS0FBS2YsYUFBTCxDQUFtQmdCLEdBQW5CLENBQXVCTixFQUF2QixDQUFWOztBQUNBLFdBQU9LLENBQUMsS0FBS0UsU0FBTixHQUFrQixLQUFLbkIsU0FBTCxDQUFlaUIsQ0FBZixDQUFsQixHQUFzQyxJQUE3QztBQUNEOztBQTNEMEMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZWNrQ2FjaGU8VE9SSUcsIFRDT05WPiB7XG4gIG9iamVjdHM6IFRDT05WW107XG4gIG9yaWdpbmFsczogVE9SSUdbXTtcbiAgdXBkYXRlVHJpZ2dlcjogbnVtYmVyO1xuICBfaWRUb1Bvc2l0aW9uOiBNYXA8c3RyaW5nLCBudW1iZXI+O1xuICBfZ2V0RGF0YTogKCkgPT4gVE9SSUdbXTtcbiAgX2NvbnZlcnQ6IFRPUklHID0+IFRDT05WO1xuXG4gIGNvbnN0cnVjdG9yKGdldERhdGE6ICgpID0+IFRPUklHW10sIGNvbnZlcnQ6IFRPUklHID0+IFRDT05WKSB7XG4gICAgdGhpcy5vYmplY3RzID0gW107XG4gICAgdGhpcy5vcmlnaW5hbHMgPSBbXTtcbiAgICB0aGlzLnVwZGF0ZVRyaWdnZXIgPSAwO1xuXG4gICAgdGhpcy5faWRUb1Bvc2l0aW9uID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX2dldERhdGEgPSBnZXREYXRhO1xuICAgIHRoaXMuX2NvbnZlcnQgPSBjb252ZXJ0O1xuICB9XG5cbiAgdXBkYXRlQWxsRGVja09iamVjdHMoKSB7XG4gICAgaWYgKCF0aGlzLl9nZXREYXRhIHx8ICF0aGlzLl9jb252ZXJ0KSByZXR1cm47XG5cbiAgICB0aGlzLm9yaWdpbmFscy5sZW5ndGggPSAwO1xuICAgIHRoaXMub2JqZWN0cy5sZW5ndGggPSAwO1xuICAgIHRoaXMuX2lkVG9Qb3NpdGlvbi5jbGVhcigpO1xuXG4gICAgdGhpcy5fZ2V0RGF0YSgpLmZvckVhY2goZCA9PiB7XG4gICAgICB0aGlzLl9pZFRvUG9zaXRpb24uc2V0KChkOiBhbnkpLmlkLCB0aGlzLm9iamVjdHMubGVuZ3RoKTtcbiAgICAgIHRoaXMub3JpZ2luYWxzLnB1c2goZCk7XG4gICAgICB0aGlzLm9iamVjdHMucHVzaCh0aGlzLl9jb252ZXJ0KGQpKTtcbiAgICB9KTtcblxuICAgIHRoaXMudHJpZ2dlclVwZGF0ZSgpO1xuICB9XG5cbiAgdXBkYXRlRGVja09iamVjdHNCeUlkcyhpZHM6IHN0cmluZ1tdKSB7XG4gICAgaWYgKCF0aGlzLl9nZXREYXRhIHx8ICF0aGlzLl9jb252ZXJ0KSByZXR1cm47XG5cbiAgICBpZHMuZm9yRWFjaChpZCA9PiB7XG4gICAgICBjb25zdCBwID0gdGhpcy5faWRUb1Bvc2l0aW9uLmdldChpZCk7XG4gICAgICBpZiAocCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMub2JqZWN0c1twXSA9IHRoaXMuX2NvbnZlcnQodGhpcy5vcmlnaW5hbHNbcF0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy50cmlnZ2VyVXBkYXRlKCk7XG4gIH1cblxuICB0cmlnZ2VyVXBkYXRlKCkge1xuICAgIHRoaXMudXBkYXRlVHJpZ2dlcisrO1xuICB9XG5cbiAgZ2V0RGVja09iamVjdEJ5SWQoaWQ6IHN0cmluZyk6ID9UQ09OViB7XG4gICAgY29uc3QgcCA9IHRoaXMuX2lkVG9Qb3NpdGlvbi5nZXQoaWQpO1xuICAgIHJldHVybiBwICE9PSB1bmRlZmluZWQgPyB0aGlzLm9iamVjdHNbcF0gOiBudWxsO1xuICB9XG5cbiAgZ2V0T3JpZ2luYWxCeUlkKGlkOiBzdHJpbmcpOiA/VE9SSUcge1xuICAgIGNvbnN0IHAgPSB0aGlzLl9pZFRvUG9zaXRpb24uZ2V0KGlkKTtcbiAgICByZXR1cm4gcCAhPT0gdW5kZWZpbmVkID8gdGhpcy5vcmlnaW5hbHNbcF0gOiBudWxsO1xuICB9XG59XG4iXX0=